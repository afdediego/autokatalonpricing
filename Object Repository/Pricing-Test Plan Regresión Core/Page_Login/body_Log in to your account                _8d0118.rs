<?xml version="1.0" encoding="UTF-8"?>
<WebElementEntity>
   <description></description>
   <name>body_Log in to your account                _8d0118</name>
   <tag></tag>
   <elementGuidId>b78159dc-4da1-4980-a241-a325a9ed4411</elementGuidId>
   <selectorCollection>
      <entry>
         <key>XPATH</key>
         <value>//body</value>
      </entry>
      <entry>
         <key>CSS</key>
         <value>body.kt-page--loading-enabled.kt-quick-panel--right.kt-demo-panel--right.kt-offcanvas-panel--right.kt-header--fixed.kt-header--minimize-menu.kt-header-mobile--fixed.kt-subheader--enabled.kt-subheader--transparent.kt-aside--enabled.kt-aside--left.kt-aside--fixed</value>
      </entry>
   </selectorCollection>
   <selectorMethod>XPATH</selectorMethod>
   <smartLocatorCollection>
      <entry>
         <key>SMART_LOCATOR</key>
         <value>internal:text=&quot;Log in to your account Select an option CANARY ISLAND Login Login Log in to your&quot;i</value>
      </entry>
   </smartLocatorCollection>
   <smartLocatorEnabled>false</smartLocatorEnabled>
   <useRalativeImagePath>true</useRalativeImagePath>
   <webElementProperties>
      <isSelected>false</isSelected>
      <matchCondition>equals</matchCondition>
      <name>tag</name>
      <type>Main</type>
      <value>body</value>
      <webElementGuid>4553a0fd-b65b-4642-9f1c-50283d02cc11</webElementGuid>
   </webElementProperties>
   <webElementProperties>
      <isSelected>false</isSelected>
      <matchCondition>equals</matchCondition>
      <name>class</name>
      <type>Main</type>
      <value>kt-page--loading-enabled kt-quick-panel--right kt-demo-panel--right kt-offcanvas-panel--right kt-header--fixed kt-header--minimize-menu kt-header-mobile--fixed kt-subheader--enabled kt-subheader--transparent kt-aside--enabled kt-aside--left kt-aside--fixed</value>
      <webElementGuid>9c76de74-0afe-44a9-a64e-4baddbc20c76</webElementGuid>
   </webElementProperties>
   <webElementProperties>
      <isSelected>true</isSelected>
      <matchCondition>equals</matchCondition>
      <name>text</name>
      <type>Main</type>
      <value>
 Log in to your account
                               Select an option CANARY ISLAND   
                                    Login
                                

    




    
    
    Login
    
    
    
        WebFont.load({
            google: {
                &quot;families&quot;: [&quot;Poppins:300,400,500,600,700&quot;]
            },
            active: function () {
                sessionStorage.fonts = true;
            }
        });
    




    
        
            
                
                    
                        
                                                            
                                                    
                    

                    
                        
                            Log in to your account
                            
                        

                        
                        
                            
                                
                            

                            
                                
                            

                            
                                
                                    
                                        Select an option
                                                                                    CANARY ISLAND
                                                                            
                                
                            

                            
                            
                            
                                
                                    Login
                                
                            
                        
                    
                
            
        
    


    


/*&lt;![CDATA[*/        Sfjs = (function() {        &quot;use strict&quot;;        if ('classList' in document.documentElement) {            var hasClass = function (el, cssClass) { return el.classList.contains(cssClass); };            var removeClass = function(el, cssClass) { el.classList.remove(cssClass); };            var addClass = function(el, cssClass) { el.classList.add(cssClass); };            var toggleClass = function(el, cssClass) { el.classList.toggle(cssClass); };        } else {            var hasClass = function (el, cssClass) { return el.className.match(new RegExp('\\b' + cssClass + '\\b')); };            var removeClass = function(el, cssClass) { el.className = el.className.replace(new RegExp('\\b' + cssClass + '\\b'), ' '); };            var addClass = function(el, cssClass) { if (!hasClass(el, cssClass)) { el.className += &quot; &quot; + cssClass; } };            var toggleClass = function(el, cssClass) { hasClass(el, cssClass) ? removeClass(el, cssClass) : addClass(el, cssClass); };        }        var noop = function() {};        var profilerStorageKey = 'symfony/profiler/';        var request = function(url, onSuccess, onError, payload, options) {            var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');            options = options || {};            options.maxTries = options.maxTries || 0;            xhr.open(options.method || 'GET', url, true);            xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');            xhr.onreadystatechange = function(state) {                if (4 !== xhr.readyState) {                    return null;                }                if (xhr.status == 404 &amp;&amp; options.maxTries > 1) {                    setTimeout(function(){                        options.maxTries--;                        request(url, onSuccess, onError, payload, options);                    }, 1000);                    return null;                }                if (200 === xhr.status) {                    (onSuccess || noop)(xhr);                } else {                    (onError || noop)(xhr);                }            };            xhr.send(payload || '');        };        var getPreference = function(name) {            if (!window.localStorage) {                return null;            }            return localStorage.getItem(profilerStorageKey + name);        };        var setPreference = function(name, value) {            if (!window.localStorage) {                return null;            }            localStorage.setItem(profilerStorageKey + name, value);        };        var requestStack = [];        var extractHeaders = function(xhr, stackElement) {            /* Here we avoid to call xhr.getResponseHeader in order to */            /* prevent polluting the console with CORS security errors */            var allHeaders = xhr.getAllResponseHeaders();            var ret;            if (ret = allHeaders.match(/^x-debug-token:\s+(.*)$/im)) {                stackElement.profile = ret[1];            }            if (ret = allHeaders.match(/^x-debug-token-link:\s+(.*)$/im)) {                stackElement.profilerUrl = ret[1];            }            if (ret = allHeaders.match(/^Symfony-Debug-Toolbar-Replace:\s+(.*)$/im)) {                stackElement.toolbarReplaceFinished = false;                stackElement.toolbarReplace = '1' === ret[1];            }        };        var successStreak = 4;        var pendingRequests = 0;        var renderAjaxRequests = function() {            var requestCounter = document.querySelector('.sf-toolbar-ajax-request-counter');            if (!requestCounter) {                return;            }            requestCounter.textContent = requestStack.length;            var infoSpan = document.querySelector(&quot;.sf-toolbar-ajax-info&quot;);            if (infoSpan) {                infoSpan.textContent = requestStack.length + ' AJAX request' + (requestStack.length !== 1 ? 's' : '');            }            var ajaxToolbarPanel = document.querySelector('.sf-toolbar-block-ajax');            if (requestStack.length) {                ajaxToolbarPanel.style.display = 'block';            } else {                ajaxToolbarPanel.style.display = 'none';            }            if (pendingRequests > 0) {                addClass(ajaxToolbarPanel, 'sf-ajax-request-loading');            } else if (successStreak &lt; 4) {                addClass(ajaxToolbarPanel, 'sf-toolbar-status-red');                removeClass(ajaxToolbarPanel, 'sf-ajax-request-loading');            } else {                removeClass(ajaxToolbarPanel, 'sf-ajax-request-loading');                removeClass(ajaxToolbarPanel, 'sf-toolbar-status-red');            }        };        var startAjaxRequest = function(index) {            var tbody = document.querySelector('.sf-toolbar-ajax-request-list');            if (!tbody) {                return;            }            var nbOfAjaxRequest = tbody.rows.length;            if (nbOfAjaxRequest >= 100) {                tbody.deleteRow(0);            }            var request = requestStack[index];            pendingRequests++;            var row = document.createElement('tr');            request.DOMNode = row;            var requestNumberCell = document.createElement('td');            requestNumberCell.textContent = index + 1;            row.appendChild(requestNumberCell);            var profilerCell = document.createElement('td');            profilerCell.textContent = 'n/a';            row.appendChild(profilerCell);            var methodCell = document.createElement('td');            methodCell.textContent = request.method;            row.appendChild(methodCell);            var typeCell = document.createElement('td');            typeCell.textContent = request.type;            row.appendChild(typeCell);            var statusCodeCell = document.createElement('td');            var statusCode = document.createElement('span');            statusCode.textContent = 'n/a';            statusCodeCell.appendChild(statusCode);            row.appendChild(statusCodeCell);            var pathCell = document.createElement('td');            pathCell.className = 'sf-ajax-request-url';            if ('GET' === request.method) {                var pathLink = document.createElement('a');                pathLink.setAttribute('href', request.url);                pathLink.textContent = request.url;                pathCell.appendChild(pathLink);            } else {                pathCell.textContent = request.url;            }            pathCell.setAttribute('title', request.url);            row.appendChild(pathCell);            var durationCell = document.createElement('td');            durationCell.className = 'sf-ajax-request-duration';            durationCell.textContent = 'n/a';            row.appendChild(durationCell);            request.liveDurationHandle = setInterval(function() {                durationCell.textContent = (new Date() - request.start) + 'ms';            }, 100);            row.className = 'sf-ajax-request sf-ajax-request-loading';            tbody.insertBefore(row, null);            var toolbarInfo = document.querySelector('.sf-toolbar-block-ajax .sf-toolbar-info');            toolbarInfo.scrollTop = toolbarInfo.scrollHeight;            renderAjaxRequests();        };        var finishAjaxRequest = function(index) {            var request = requestStack[index];            clearInterval(request.liveDurationHandle);            if (!request.DOMNode) {                return;            }            if (request.toolbarReplace &amp;&amp; !request.toolbarReplaceFinished &amp;&amp; request.profile) {                /* Flag as complete because finishAjaxRequest can be called multiple times. */                request.toolbarReplaceFinished = true;                /* Search up through the DOM to find the toolbar's container ID. */                for (var elem = request.DOMNode; elem &amp;&amp; elem !== document; elem = elem.parentNode) {                    if (elem.id.match(/^sfwdt/)) {                        Sfjs.loadToolbar(elem.id.replace(/^sfwdt/, ''), request.profile);                        break;                    }                }            }            pendingRequests--;            var row = request.DOMNode;            /* Unpack the children from the row */            var profilerCell = row.children[1];            var methodCell = row.children[2];            var statusCodeCell = row.children[4];            var statusCodeElem = statusCodeCell.children[0];            var durationCell = row.children[6];            if (request.error) {                row.className = 'sf-ajax-request sf-ajax-request-error';                methodCell.className = 'sf-ajax-request-error';                successStreak = 0;            } else {                row.className = 'sf-ajax-request sf-ajax-request-ok';                successStreak++;            }            if (request.statusCode) {                if (request.statusCode &lt; 300) {                    statusCodeElem.setAttribute('class', 'sf-toolbar-status');                } else if (request.statusCode &lt; 400) {                    statusCodeElem.setAttribute('class', 'sf-toolbar-status sf-toolbar-status-yellow');                } else {                    statusCodeElem.setAttribute('class', 'sf-toolbar-status sf-toolbar-status-red');                }                statusCodeElem.textContent = request.statusCode;            } else {                statusCodeElem.setAttribute('class', 'sf-toolbar-status sf-toolbar-status-red');            }            if (request.duration) {                durationCell.textContent = request.duration + 'ms';            }            if (request.profilerUrl) {                profilerCell.textContent = '';                var profilerLink = document.createElement('a');                profilerLink.setAttribute('href', request.statusCode &lt; 400 ? request.profilerUrl : request.profilerUrl + '?panel=exception');                profilerLink.textContent = request.profile;                profilerCell.appendChild(profilerLink);            }            renderAjaxRequests();        };        var addEventListener;        var el = document.createElement('div');        if (!('addEventListener' in el)) {            addEventListener = function (element, eventName, callback) {                element.attachEvent('on' + eventName, callback);            };        } else {            addEventListener = function (element, eventName, callback) {                element.addEventListener(eventName, callback, false);            };        }                    if (window.fetch &amp;&amp; window.fetch.polyfill === undefined) {                var oldFetch = window.fetch;                window.fetch = function () {                    var promise = oldFetch.apply(this, arguments);                    var url = arguments[0];                    var params = arguments[1];                    var paramType = Object.prototype.toString.call(arguments[0]);                    if (paramType === '[object Request]') {                        url = arguments[0].url;                        params = {                            method: arguments[0].method,                            credentials: arguments[0].credentials,                            headers: arguments[0].headers,                            mode: arguments[0].mode,                            redirect: arguments[0].redirect                        };                    } else {                        url = String(url);                    }                    if (!url.match(new RegExp(&quot;^\/((index|app(_[\\w]+)?)\\.php\/)?_wdt&quot;))) {                        var method = 'GET';                        if (params &amp;&amp; params.method !== undefined) {                            method = params.method;                        }                        var stackElement = {                            error: false,                            url: url,                            method: method,                            type: 'fetch',                            start: new Date()                        };                        var idx = requestStack.push(stackElement) - 1;                        promise.then(function (r) {                            stackElement.duration = new Date() - stackElement.start;                            stackElement.error = r.status &lt; 200 || r.status >= 400;                            stackElement.statusCode = r.status;                            stackElement.profile = r.headers.get('x-debug-token');                            stackElement.profilerUrl = r.headers.get('x-debug-token-link');                            stackElement.toolbarReplaceFinished = false;                            stackElement.toolbarReplace = '1' === r.headers.get('Symfony-Debug-Toolbar-Replace');                            finishAjaxRequest(idx);                        }, function (e){                            stackElement.error = true;                            finishAjaxRequest(idx);                        });                        startAjaxRequest(idx);                    }                    return promise;                };            }            if (window.XMLHttpRequest &amp;&amp; XMLHttpRequest.prototype.addEventListener) {                var proxied = XMLHttpRequest.prototype.open;                XMLHttpRequest.prototype.open = function(method, url, async, user, pass) {                    var self = this;                    /* prevent logging AJAX calls to static and inline files, like templates */                    var path = url;                    if (url.substr(0, 1) === '/') {                        if (0 === url.indexOf('')) {                            path = url.substr(0);                        }                    }                    else if (0 === url.indexOf('http\u003A\/\/pre\u002Dpricing.recordgo.cloud')) {                        path = url.substr(33);                    }                    if (!path.match(new RegExp(&quot;^\/((index|app(_[\\w]+)?)\\.php\/)?_wdt&quot;))) {                        var stackElement = {                            error: false,                            url: url,                            method: method,                            type: 'xhr',                            start: new Date()                        };                        var idx = requestStack.push(stackElement) - 1;                        this.addEventListener('readystatechange', function() {                            if (self.readyState == 4) {                                stackElement.duration = new Date() - stackElement.start;                                stackElement.error = self.status &lt; 200 || self.status >= 400;                                stackElement.statusCode = self.status;                                extractHeaders(self, stackElement);                                finishAjaxRequest(idx);                            }                        }, false);                        startAjaxRequest(idx);                    }                    proxied.apply(this, Array.prototype.slice.call(arguments));                };            }                return {            hasClass: hasClass,            removeClass: removeClass,            addClass: addClass,            toggleClass: toggleClass,            getPreference: getPreference,            setPreference: setPreference,            addEventListener: addEventListener,            request: request,            renderAjaxRequests: renderAjaxRequests,            load: function(selector, url, onSuccess, onError, options) {                var el = document.getElementById(selector);                if (el &amp;&amp; el.getAttribute('data-sfurl') !== url) {                    request(                        url,                        function(xhr) {                            el.innerHTML = xhr.responseText;                            el.setAttribute('data-sfurl', url);                            removeClass(el, 'loading');                            var pending = pendingRequests;                            for (var i = 0; i &lt; requestStack.length; i++) {                                startAjaxRequest(i);                                if (requestStack[i].duration) {                                    finishAjaxRequest(i);                                }                            }                            /* Revert the pending state in case there was a start called without a finish above. */                            pendingRequests = pending;                            (onSuccess || noop)(xhr, el);                        },                        function(xhr) { (onError || noop)(xhr, el); },                        '',                        options                    );                }                return this;            },            loadToolbar: function(token, newToken) {                newToken = (newToken || token);                this.load(                    'sfwdt' + token,                    '\/_wdt\/xxxxxx'.replace(/xxxxxx/, newToken),                    function(xhr, el) {                        /* Evaluate in global scope scripts embedded inside the toolbar */                        var i, scripts = [].slice.call(el.querySelectorAll('script'));                        for (i = 0; i &lt; scripts.length; ++i) {                            eval.call({}, scripts[i].firstChild.nodeValue);                        }                        el.style.display = -1 !== xhr.responseText.indexOf('sf-toolbarreset') ? 'block' : 'none';                        if (el.style.display == 'none') {                            return;                        }                        if (getPreference('toolbar/displayState') == 'none') {                            document.getElementById('sfToolbarMainContent-' + newToken).style.display = 'none';                            document.getElementById('sfToolbarClearer-' + newToken).style.display = 'none';                            document.getElementById('sfMiniToolbar-' + newToken).style.display = 'block';                        } else {                            document.getElementById('sfToolbarMainContent-' + newToken).style.display = 'block';                            document.getElementById('sfToolbarClearer-' + newToken).style.display = 'block';                            document.getElementById('sfMiniToolbar-' + newToken).style.display = 'none';                        }                        /* Handle toolbar-info position */                        var toolbarBlocks = [].slice.call(el.querySelectorAll('.sf-toolbar-block'));                        for (i = 0; i &lt; toolbarBlocks.length; ++i) {                            toolbarBlocks[i].onmouseover = function () {                                var toolbarInfo = this.querySelectorAll('.sf-toolbar-info')[0];                                var pageWidth = document.body.clientWidth;                                var elementWidth = toolbarInfo.offsetWidth;                                var leftValue = (elementWidth + this.offsetLeft) - pageWidth;                                var rightValue = (elementWidth + (pageWidth - this.offsetLeft)) - pageWidth;                                /* Reset right and left value, useful on window resize */                                toolbarInfo.style.right = '';                                toolbarInfo.style.left = '';                                if (elementWidth > pageWidth) {                                    toolbarInfo.style.left = 0;                                }                                else if (leftValue > 0 &amp;&amp; rightValue > 0) {                                    toolbarInfo.style.right = (rightValue * -1) + 'px';                                } else if (leftValue &lt; 0) {                                    toolbarInfo.style.left = 0;                                } else {                                    toolbarInfo.style.right = '0px';                                }                            };                        }                        addEventListener(document.getElementById('sfToolbarHideButton-' + newToken), 'click', function (event) {                            event.preventDefault();                            var p = this.parentNode;                            p.style.display = 'none';                            (p.previousElementSibling || p.previousSibling).style.display = 'none';                            document.getElementById('sfMiniToolbar-' + newToken).style.display = 'block';                            setPreference('toolbar/displayState', 'none');                        });                        addEventListener(document.getElementById('sfToolbarMiniToggler-' + newToken), 'click', function (event) {                            event.preventDefault();                            var elem = this.parentNode;                            if (elem.style.display == 'none') {                                document.getElementById('sfToolbarMainContent-' + newToken).style.display = 'none';                                document.getElementById('sfToolbarClearer-' + newToken).style.display = 'none';                                elem.style.display = 'block';                            } else {                                document.getElementById('sfToolbarMainContent-' + newToken).style.display = 'block';                                document.getElementById('sfToolbarClearer-' + newToken).style.display = 'block';                                elem.style.display = 'none'                            }                            setPreference('toolbar/displayState', 'block');                        });                        renderAjaxRequests();                        addEventListener(document.querySelector('.sf-toolbar-block-ajax'), 'mouseenter', function (event) {                            var elem = document.querySelector('.sf-toolbar-block-ajax .sf-toolbar-info');                            elem.scrollTop = elem.scrollHeight;                        });                        addEventListener(document.querySelector('.sf-toolbar-block-ajax > .sf-toolbar-icon'), 'click', function (event) {                            event.preventDefault();                            toggleClass(this.parentNode, 'hover');                        });                        var dumpInfo = document.querySelector('.sf-toolbar-block-dump .sf-toolbar-info');                        if (null !== dumpInfo) {                            addEventListener(dumpInfo, 'sfbeforedumpcollapse', function () {                                dumpInfo.style.minHeight = dumpInfo.getBoundingClientRect().height+'px';                            });                            addEventListener(dumpInfo, 'mouseleave', function () {                                dumpInfo.style.minHeight = '';                            });                        }                    },                    function(xhr) {                        if (xhr.status !== 0) {                            var sfwdt = document.getElementById('sfwdt' + token);                            sfwdt.innerHTML = '\                                &lt;div class=&quot;sf-toolbarreset&quot;>\                                    &lt;div class=&quot;sf-toolbar-icon&quot;>&lt;svg width=&quot;26&quot; height=&quot;28&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 26 28&quot; enable-background=&quot;new 0 0 26 28&quot; xml:space=&quot;preserve&quot;>&lt;path fill=&quot;#FFFFFF&quot; d=&quot;M13 0C5.8 0 0 5.8 0 13c0 7.2 5.8 13 13 13c7.2 0 13-5.8 13-13C26 5.8 20.2 0 13 0z M20 7.5 c-0.6 0-1-0.3-1-0.9c0-0.2 0-0.4 0.2-0.6c0.1-0.3 0.2-0.3 0.2-0.4c0-0.3-0.5-0.4-0.7-0.4c-2 0.1-2.5 2.7-2.9 4.8l-0.2 1.1 c1.1 0.2 1.9 0 2.4-0.3c0.6-0.4-0.2-0.8-0.1-1.3C18 9.2 18.4 9 18.7 8.9c0.5 0 0.8 0.5 0.8 1c0 0.8-1.1 2-3.3 1.9 c-0.3 0-0.5 0-0.7-0.1L15 14.1c-0.4 1.7-0.9 4.1-2.6 6.2c-1.5 1.8-3.1 2.1-3.8 2.1c-1.3 0-2.1-0.6-2.2-1.6c0-0.9 0.8-1.4 1.3-1.4 c0.7 0 1.2 0.5 1.2 1.1c0 0.5-0.2 0.6-0.4 0.7c-0.1 0.1-0.3 0.2-0.3 0.4c0 0.1 0.1 0.3 0.4 0.3c0.5 0 0.9-0.3 1.2-0.5 c1.3-1 1.7-2.9 2.4-6.2l0.1-0.8c0.2-1.1 0.5-2.3 0.8-3.5c-0.9-0.7-1.4-1.5-2.6-1.8c-0.8-0.2-1.3 0-1.7 0.4C8.4 10 8.6 10.7 9 11.1 l0.7 0.7c0.8 0.9 1.3 1.7 1.1 2.7c-0.3 1.6-2.1 2.8-4.3 2.1c-1.9-0.6-2.2-1.9-2-2.7c0.2-0.6 0.7-0.8 1.2-0.6 c0.5 0.2 0.7 0.8 0.6 1.3c0 0.1 0 0.1-0.1 0.3C6 15 5.9 15.2 5.9 15.3c-0.1 0.4 0.4 0.7 0.8 0.8c0.8 0.3 1.7-0.2 1.9-0.9 c0.2-0.6-0.2-1.1-0.4-1.2l-0.8-0.9c-0.4-0.4-1.2-1.5-0.8-2.8c0.2-0.5 0.5-1 0.9-1.4c1-0.7 2-0.8 3-0.6c1.3 0.4 1.9 1.2 2.8 1.9 c0.5-1.3 1.1-2.6 2-3.8c0.9-1 2-1.7 3.3-1.8C20 4.8 21 5.4 21 6.3C21 6.7 20.8 7.5 20 7.5z&quot;/>&lt;/svg>&lt;/div>\                                    An error occurred while loading the web debug toolbar. &lt;a href=&quot;\/_profiler\/' + newToken + '>Open the web profiler.&lt;/a>\                                &lt;/div>\                            ';                            sfwdt.setAttribute('class', 'sf-toolbar sf-error-toolbar');                        }                    },                    { maxTries: 5 }                );                return this;            },            toggle: function(selector, elOn, elOff) {                var tmp = elOn.style.display,                    el = document.getElementById(selector);                elOn.style.display = elOff.style.display;                elOff.style.display = tmp;                if (el) {                    el.style.display = 'none' === tmp ? 'none' : 'block';                }                return this;            },            createTabs: function() {                var tabGroups = document.querySelectorAll('.sf-tabs:not([data-processed=true])');                /* create the tab navigation for each group of tabs */                for (var i = 0; i &lt; tabGroups.length; i++) {                    var tabs = tabGroups[i].querySelectorAll(':scope > .tab');                    var tabNavigation = document.createElement('ul');                    tabNavigation.className = 'tab-navigation';                    var selectedTabId = 'tab-' + i + '-0'; /* select the first tab by default */                    for (var j = 0; j &lt; tabs.length; j++) {                        var tabId = 'tab-' + i + '-' + j;                        var tabTitle = tabs[j].querySelector('.tab-title').innerHTML;                        var tabNavigationItem = document.createElement('li');                        tabNavigationItem.setAttribute('data-tab-id', tabId);                        if (hasClass(tabs[j], 'active')) { selectedTabId = tabId; }                        if (hasClass(tabs[j], 'disabled')) { addClass(tabNavigationItem, 'disabled'); }                        tabNavigationItem.innerHTML = tabTitle;                        tabNavigation.appendChild(tabNavigationItem);                        var tabContent = tabs[j].querySelector('.tab-content');                        tabContent.parentElement.setAttribute('id', tabId);                    }                    tabGroups[i].insertBefore(tabNavigation, tabGroups[i].firstChild);                    addClass(document.querySelector('[data-tab-id=&quot;' + selectedTabId + '&quot;]'), 'active');                }                /* display the active tab and add the 'click' event listeners */                for (i = 0; i &lt; tabGroups.length; i++) {                    tabNavigation = tabGroups[i].querySelectorAll(':scope > .tab-navigation li');                    for (j = 0; j &lt; tabNavigation.length; j++) {                        tabId = tabNavigation[j].getAttribute('data-tab-id');                        document.getElementById(tabId).querySelector('.tab-title').className = 'hidden';                        if (hasClass(tabNavigation[j], 'active')) {                            document.getElementById(tabId).className = 'block';                        } else {                            document.getElementById(tabId).className = 'hidden';                        }                        tabNavigation[j].addEventListener('click', function(e) {                            var activeTab = e.target || e.srcElement;                            /* needed because when the tab contains HTML contents, user can click */                            /* on any of those elements instead of their parent '&lt;li>' element */                            while (activeTab.tagName.toLowerCase() !== 'li') {                                activeTab = activeTab.parentNode;                            }                            /* get the full list of tabs through the parent of the active tab element */                            var tabNavigation = activeTab.parentNode.children;                            for (var k = 0; k &lt; tabNavigation.length; k++) {                                var tabId = tabNavigation[k].getAttribute('data-tab-id');                                document.getElementById(tabId).className = 'hidden';                                removeClass(tabNavigation[k], 'active');                            }                            addClass(activeTab, 'active');                            var activeTabId = activeTab.getAttribute('data-tab-id');                            document.getElementById(activeTabId).className = 'block';                        });                    }                    tabGroups[i].setAttribute('data-processed', 'true');                }            },            createToggles: function() {                var toggles = document.querySelectorAll('.sf-toggle:not([data-processed=true])');                for (var i = 0; i &lt; toggles.length; i++) {                    var elementSelector = toggles[i].getAttribute('data-toggle-selector');                    var element = document.querySelector(elementSelector);                    addClass(element, 'sf-toggle-content');                    if (toggles[i].hasAttribute('data-toggle-initial') &amp;&amp; toggles[i].getAttribute('data-toggle-initial') == 'display') {                        addClass(toggles[i], 'sf-toggle-on');                        addClass(element, 'sf-toggle-visible');                    } else {                        addClass(toggles[i], 'sf-toggle-off');                        addClass(element, 'sf-toggle-hidden');                    }                    addEventListener(toggles[i], 'click', function(e) {                        e.preventDefault();                        if ('' !== window.getSelection().toString()) {                            /* Don't do anything on text selection */                            return;                        }                        var toggle = e.target || e.srcElement;                        /* needed because when the toggle contains HTML contents, user can click */                        /* on any of those elements instead of their parent '.sf-toggle' element */                        while (!hasClass(toggle, 'sf-toggle')) {                            toggle = toggle.parentNode;                        }                        var element = document.querySelector(toggle.getAttribute('data-toggle-selector'));                        toggleClass(toggle, 'sf-toggle-on');                        toggleClass(toggle, 'sf-toggle-off');                        toggleClass(element, 'sf-toggle-hidden');                        toggleClass(element, 'sf-toggle-visible');                        /* the toggle doesn't change its contents when clicking on it */                        if (!toggle.hasAttribute('data-toggle-alt-content')) {                            return;                        }                        if (!toggle.hasAttribute('data-toggle-original-content')) {                            toggle.setAttribute('data-toggle-original-content', toggle.innerHTML);                        }                        var currentContent = toggle.innerHTML;                        var originalContent = toggle.getAttribute('data-toggle-original-content');                        var altContent = toggle.getAttribute('data-toggle-alt-content');                        toggle.innerHTML = currentContent !== altContent ? altContent : originalContent;                    });                    /* Prevents from disallowing clicks on links inside toggles */                    var toggleLinks = toggles[i].querySelectorAll('a');                    for (var j = 0; j &lt; toggleLinks.length; j++) {                        addEventListener(toggleLinks[j], 'click', function(e) {                            e.stopPropagation();                        });                    }                    toggles[i].setAttribute('data-processed', 'true');                }            },            createFilters: function() {                document.querySelectorAll('[data-filters] [data-filter]').forEach(function (filter) {                    var filters = filter.closest('[data-filters]'),                        type = 'choice',                        name = filter.dataset.filter,                        ucName = name.charAt(0).toUpperCase()+name.slice(1),                        list = document.createElement('ul'),                        values = filters.dataset['filter'+ucName] || filters.querySelectorAll('[data-filter-'+name+']'),                        labels = {},                        defaults = null,                        indexed = {},                        processed = {};                    if (typeof values === 'string') {                        type = 'level';                        labels = values.split(',');                        values = values.toLowerCase().split(',');                        defaults = values.length - 1;                    }                    addClass(list, 'filter-list');                    addClass(list, 'filter-list-'+type);                    values.forEach(function (value, i) {                        if (value instanceof HTMLElement) {                            value = value.dataset['filter'+ucName];                        }                        if (value in processed) {                            return;                        }                        var option = document.createElement('li'),                            label = i in labels ? labels[i] : value,                            active = false,                            matches;                        if ('' === label) {                            option.innerHTML = '&lt;em>(none)&lt;/em>';                        } else {                            option.innerText = label;                        }                        option.dataset.filter = value;                        option.setAttribute('title', 1 === (matches = filters.querySelectorAll('[data-filter-'+name+'=&quot;'+value+'&quot;]').length) ? 'Matches 1 row' : 'Matches '+matches+' rows');                        indexed[value] = i;                        list.appendChild(option);                        addEventListener(option, 'click', function () {                            if ('choice' === type) {                                filters.querySelectorAll('[data-filter-'+name+']').forEach(function (row) {                                    if (option.dataset.filter === row.dataset['filter'+ucName]) {                                        toggleClass(row, 'filter-hidden-'+name);                                    }                                });                                toggleClass(option, 'active');                            } else if ('level' === type) {                                if (i === this.parentNode.querySelectorAll('.active').length - 1) {                                    return;                                }                                this.parentNode.querySelectorAll('li').forEach(function (currentOption, j) {                                    if (j &lt;= i) {                                        addClass(currentOption, 'active');                                        if (i === j) {                                            addClass(currentOption, 'last-active');                                        } else {                                            removeClass(currentOption, 'last-active');                                        }                                    } else {                                        removeClass(currentOption, 'active');                                        removeClass(currentOption, 'last-active');                                    }                                });                                filters.querySelectorAll('[data-filter-'+name+']').forEach(function (row) {                                    if (i &lt; indexed[row.dataset['filter'+ucName]]) {                                        addClass(row, 'filter-hidden-'+name);                                    } else {                                        removeClass(row, 'filter-hidden-'+name);                                    }                                });                            }                        });                        if ('choice' === type) {                            active = null === defaults || 0 &lt;= defaults.indexOf(value);                        } else if ('level' === type) {                            active = i &lt;= defaults;                            if (active &amp;&amp; i === defaults) {                                addClass(option, 'last-active');                            }                        }                        if (active) {                            addClass(option, 'active');                        } else {                            filters.querySelectorAll('[data-filter-'+name+'=&quot;'+value+'&quot;]').forEach(function (row) {                                toggleClass(row, 'filter-hidden-'+name);                            });                        }                        processed[value] = true;                    });                    if (1 &lt; list.childNodes.length) {                        filter.appendChild(list);                        filter.dataset.filtered = '';                    }                });            }        };    })();    Sfjs.addEventListener(document, 'DOMContentLoaded', function() {        Sfjs.createTabs();        Sfjs.createToggles();    });/*]]&gt;*/    .sf-minitoolbar {    background-color: #222;    border-top-left-radius: 4px;    bottom: 0;    box-sizing: border-box;    display: none;    height: 36px;    padding: 6px;    position: fixed;    right: 0;    z-index: 99999;}.sf-minitoolbar a {    display: block;}.sf-minitoolbar svg,.sf-minitoolbar img {    max-height: 24px;    max-width: 24px;    display: inline;}.sf-toolbar-clearer {    clear: both;    height: 36px;}.sf-display-none {    display: none;}.sf-toolbarreset * {    box-sizing: content-box;    vertical-align: baseline;    letter-spacing: normal;    width: auto;}.sf-toolbarreset {    background-color: #222;    bottom: 0;    box-shadow: 0 -1px 0 rgba(0, 0, 0, 0.2);    color: #EEE;    font: 11px Arial, sans-serif;    left: 0;    margin: 0;    padding: 0 36px 0 0;    position: fixed;    right: 0;    text-align: left;    text-transform: none;    z-index: 99999;    direction: ltr;    /* neutralize the aliasing defined by external CSS styles */    -webkit-font-smoothing: subpixel-antialiased;    -moz-osx-font-smoothing: auto;}.sf-toolbarreset abbr {    border: dashed #777;    border-width: 0 0 1px;}.sf-toolbarreset svg,.sf-toolbarreset img {    height: 20px;    width: 20px;    display: inline-block;}.sf-toolbarreset .hide-button {    background: #444;    display: block;    position: absolute;    top: 0;    right: 0;    width: 36px;    height: 36px;    cursor: pointer;    text-align: center;}.sf-toolbarreset .hide-button svg {    max-height: 18px;    margin-top: 10px;}.sf-toolbar-block {    cursor: default;    display: block;    float: left;    height: 36px;    margin-right: 0;    white-space: nowrap;    max-width: 15%;}.sf-toolbar-block > a,.sf-toolbar-block > a:hover {    display: block;    text-decoration: none;    color: inherit;}.sf-toolbar-block span {    display: inline-block;}.sf-toolbar-block .sf-toolbar-value {    color: #F5F5F5;    font-size: 13px;    line-height: 36px;    padding: 0;}.sf-toolbar-block .sf-toolbar-label,.sf-toolbar-block .sf-toolbar-class-separator {    color: #AAA;    font-size: 12px;}.sf-toolbar-block .sf-toolbar-info {    border-collapse: collapse;    display: table;    z-index: 100000;}.sf-toolbar-block hr {    border-top: 1px solid #777;    margin: 4px 0;    padding-top: 4px;}.sf-toolbar-block .sf-toolbar-info-piece {    /* this 'border-bottom' trick is needed because 'margin-bottom' doesn't work for table rows */    border-bottom: solid transparent 3px;    display: table-row;}.sf-toolbar-block .sf-toolbar-info-piece-additional,.sf-toolbar-block .sf-toolbar-info-piece-additional-detail {    display: none;}.sf-toolbar-block .sf-toolbar-info-group {    margin-bottom: 4px;    padding-bottom: 2px;    border-bottom: 1px solid #333333;}.sf-toolbar-block .sf-toolbar-info-group:last-child {    margin-bottom: 0;    padding-bottom: 0;    border-bottom: none;}.sf-toolbar-block .sf-toolbar-info-piece .sf-toolbar-status {    padding: 2px 5px;    margin-bottom: 0;}.sf-toolbar-block .sf-toolbar-info-piece .sf-toolbar-status + .sf-toolbar-status {    margin-left: 4px;}.sf-toolbar-block .sf-toolbar-info-piece:last-child {    margin-bottom: 0;}div.sf-toolbar .sf-toolbar-block .sf-toolbar-info-piece a {    color: #99CDD8;    text-decoration: underline;}div.sf-toolbar .sf-toolbar-block a:hover {    text-decoration: none;}.sf-toolbar-block .sf-toolbar-info-piece b {    color: #AAA;    display: table-cell;    font-size: 11px;    padding: 4px 8px 4px 0;}.sf-toolbar-block:not(.sf-toolbar-block-dump) .sf-toolbar-info-piece span {    color: #F5F5F5;}.sf-toolbar-block .sf-toolbar-info-piece span {    font-size: 12px;}.sf-toolbar-block .sf-toolbar-info {    background-color: #444;    bottom: 36px;    color: #F5F5F5;    display: none;    padding: 9px 0;    position: absolute;}.sf-toolbar-block .sf-toolbar-info:empty {    visibility: hidden;}.sf-toolbar-block .sf-toolbar-status {    display: inline-block;    color: #FFF;    background-color: #666;    padding: 3px 6px;    margin-bottom: 2px;    vertical-align: middle;    min-width: 15px;    min-height: 13px;    text-align: center;}.sf-toolbar-block .sf-toolbar-status-green {    background-color: #4F805D;}.sf-toolbar-block .sf-toolbar-status-red {    background-color: #B0413E;}.sf-toolbar-block .sf-toolbar-status-yellow {    background-color: #A46A1F;}.sf-toolbar-block.sf-toolbar-status-green {    background-color: #4F805D;    color: #FFF;}.sf-toolbar-block.sf-toolbar-status-red {    background-color: #B0413E;    color: #FFF;}.sf-toolbar-block.sf-toolbar-status-yellow {    background-color: #A46A1F;    color: #FFF;}.sf-toolbar-block-request .sf-toolbar-status {    color: #FFF;    display: inline-block;    font-size: 14px;    height: 36px;    line-height: 36px;    padding: 0 10px;}.sf-toolbar-block-request .sf-toolbar-info-piece a {    text-decoration: none;}.sf-toolbar-block-request .sf-toolbar-info-piece a:hover {    text-decoration: underline;}.sf-toolbar-block-request .sf-toolbar-redirection-status {    font-weight: normal;    padding: 2px 4px;    line-height: 18px;}.sf-toolbar-block-request .sf-toolbar-info-piece span.sf-toolbar-redirection-method {    font-size: 12px;    height: 17px;    line-height: 17px;    margin-right: 5px;}.sf-toolbar-block-ajax .sf-toolbar-icon {    cursor: pointer;}.sf-toolbar-status-green .sf-toolbar-label,.sf-toolbar-status-yellow .sf-toolbar-label,.sf-toolbar-status-red .sf-toolbar-label {    color: #FFF;}.sf-toolbar-status-green svg path,.sf-toolbar-status-green svg .sf-svg-path,.sf-toolbar-status-red svg path,.sf-toolbar-status-red svg .sf-svg-path,.sf-toolbar-status-yellow svg path,.sf-toolbar-status-yellow svg .sf-svg-path {    fill: #FFF;}.sf-toolbar-block-config svg path,.sf-toolbar-block-config svg .sf-svg-path {    fill: #FFF;}.sf-toolbar-block .sf-toolbar-icon {    display: block;    height: 36px;    padding: 0 7px;    overflow: hidden;    text-overflow: ellipsis;}.sf-toolbar-block-request .sf-toolbar-icon {    padding-left: 0;    padding-right: 0;}.sf-toolbar-block .sf-toolbar-icon img,.sf-toolbar-block .sf-toolbar-icon svg {    border-width: 0;    position: relative;    top: 8px;    vertical-align: baseline;}.sf-toolbar-block .sf-toolbar-icon img + span,.sf-toolbar-block .sf-toolbar-icon svg + span {    margin-left: 4px;}.sf-toolbar-block-config .sf-toolbar-icon .sf-toolbar-value {    margin-left: 4px;}.sf-toolbar-block:hover,.sf-toolbar-block.hover {    position: relative;}.sf-toolbar-block:hover .sf-toolbar-icon,.sf-toolbar-block.hover .sf-toolbar-icon {    background-color: #444;    position: relative;    z-index: 10002;}.sf-toolbar-block-ajax.hover .sf-toolbar-info {    z-index: 10001;}.sf-toolbar-block:hover .sf-toolbar-info,.sf-toolbar-block.hover .sf-toolbar-info {    display: block;    padding: 10px;    max-width: 480px;    max-height: 480px;    word-wrap: break-word;    overflow: hidden;    overflow-y: auto;}.sf-toolbar-info-piece b.sf-toolbar-ajax-info {    color: #F5F5F5;}.sf-toolbar-ajax-requests {    table-layout: auto;    width: 100%;}.sf-toolbar-ajax-requests td {    background-color: #444;    border-bottom: 1px solid #777;    color: #F5F5F5;    font-size: 12px;    padding: 4px;}.sf-toolbar-ajax-requests tr:last-child td {    border-bottom: 0;}.sf-toolbar-ajax-requests th {    background-color: #222;    border-bottom: 0;    color: #AAA;    font-size: 11px;    padding: 4px;}.sf-ajax-request-url {    max-width: 250px;    line-height: 9px;    overflow: hidden;    text-overflow: ellipsis;}.sf-toolbar-ajax-requests .sf-ajax-request-url a {    text-decoration: none;}.sf-toolbar-ajax-requests .sf-ajax-request-url a:hover {    text-decoration: underline;}.sf-ajax-request-duration {    text-align: right;}.sf-ajax-request-loading {    animation: sf-blink .5s ease-in-out infinite;}@keyframes sf-blink {    0% { background: #222; }    50% { background: #444; }    100% { background: #222; }}.sf-toolbar-block.sf-toolbar-block-dump .sf-toolbar-info {    max-width: none;    width: 100%;    position: fixed;    box-sizing: border-box;    left: 0;}.sf-toolbar-block-dump pre.sf-dump {    background-color: #222;    border-color: #777;    border-radius: 0;    margin: 6px 0 12px 0;}.sf-toolbar-block-dump pre.sf-dump:last-child {    margin-bottom: 0;}.sf-toolbar-block-dump pre.sf-dump .sf-dump-search-wrapper {    margin-bottom: 5px;}.sf-toolbar-block-dump pre.sf-dump span.sf-dump-search-count {    color: #333;    font-size: 12px;}.sf-toolbar-block-dump .sf-toolbar-info-piece {    display: block;}.sf-toolbar-block-dump .sf-toolbar-info-piece .sf-toolbar-file-line {    color: #AAA;    margin-left: 4px;}.sf-toolbar-block-dump .sf-toolbar-info img {    display: none;}/* Responsive Design */.sf-toolbar-icon .sf-toolbar-label,.sf-toolbar-icon .sf-toolbar-value {    display: none;}.sf-toolbar-block-config .sf-toolbar-icon .sf-toolbar-label {    display: inline-block;}/* Legacy Design - these styles are maintained to make old panels look   a bit better on the new toolbar */.sf-toolbar-block .sf-toolbar-info-piece-additional-detail {    color: #AAA;    font-size: 12px;}.sf-toolbar-status-green .sf-toolbar-info-piece-additional-detail,.sf-toolbar-status-yellow .sf-toolbar-info-piece-additional-detail,.sf-toolbar-status-red .sf-toolbar-info-piece-additional-detail {    color: #FFF;}@media (min-width: 768px) {    .sf-toolbar-icon .sf-toolbar-label,    .sf-toolbar-icon .sf-toolbar-value {        display: inline;    }    .sf-toolbar-block .sf-toolbar-icon img,    .sf-toolbar-block .sf-toolbar-icon svg {        top: 6px;    }    .sf-toolbar-block-time .sf-toolbar-icon svg,    .sf-toolbar-block-memory .sf-toolbar-icon svg {        display: none;    }    .sf-toolbar-block-time .sf-toolbar-icon svg + span,    .sf-toolbar-block-memory .sf-toolbar-icon svg + span {        margin-left: 0;    }    .sf-toolbar-block .sf-toolbar-icon {        padding: 0 10px;    }    .sf-toolbar-block-time .sf-toolbar-icon {        padding-right: 5px;    }    .sf-toolbar-block-memory .sf-toolbar-icon {        padding-left: 5px;    }    .sf-toolbar-block-request .sf-toolbar-icon {        padding-left: 0;        padding-right: 0;    }    .sf-toolbar-block-request .sf-toolbar-label {        margin-left: 5px;    }    .sf-toolbar-block-request .sf-toolbar-status + svg {        margin-left: 5px;    }    .sf-toolbar-block-request .sf-toolbar-icon svg + .sf-toolbar-label {        margin-left: 0;     }    .sf-toolbar-block-request .sf-toolbar-label + .sf-toolbar-value {        margin-right: 10px;    }    .sf-toolbar-block-request:hover .sf-toolbar-info {        max-width: none;    }    .sf-toolbar-block .sf-toolbar-info-piece b {        font-size: 12px;    }    .sf-toolbar-block .sf-toolbar-info-piece span {        font-size: 13px;    }    .sf-toolbar-block-right {        float: right;        margin-left: 0;        margin-right: 0;    }}@media (min-width: 1024px) {    .sf-toolbar-block .sf-toolbar-info-piece-additional,    .sf-toolbar-block .sf-toolbar-info-piece-additional-detail {        display: inline;    }    .sf-toolbar-block .sf-toolbar-info-piece-additional:empty,    .sf-toolbar-block .sf-toolbar-info-piece-additional-detail:empty {        display: none;    }}/***** Error Toolbar *****/.sf-error-toolbar .sf-toolbarreset {    background: #222;    color: #f5f5f5;    font: 13px/36px Arial, sans-serif;    height: 36px;    padding: 0 15px;    text-align: left;}.sf-error-toolbar .sf-toolbarreset svg {    height: auto;}.sf-error-toolbar .sf-toolbarreset a {    color: #99cdd8;    margin-left: 5px;    text-decoration: underline;}.sf-error-toolbar .sf-toolbarreset a:hover {    text-decoration: none;}.sf-error-toolbar .sf-toolbarreset .sf-toolbar-icon {    float: left;    padding: 5px 0;    margin-right: 10px;}/***** Media query print: Do not print the Toolbar. *****/@media print {    .sf-toolbar {        display: none;    }}/*&lt;![CDATA[*/    (function () {        Sfjs.loadToolbar('5bf6c7');    })();/*]]&gt;*/


/html[@class=&quot;wf-poppins-n3-active wf-poppins-n5-active wf-poppins-n7-active wf-poppins-n4-active wf-poppins-n6-active wf-active&quot;]/body[@class=&quot;kt-page--loading-enabled kt-quick-panel--right kt-demo-panel--right kt-offcanvas-panel--right kt-header--fixed kt-header--minimize-menu kt-header-mobile--fixed kt-subheader--enabled kt-subheader--transparent kt-aside--enabled kt-aside--left kt-aside--fixed&quot;]/div[@id=&quot;app&quot;]/div[@id=&quot;kt_login&quot;]/div[@class=&quot;kt-grid__item kt-grid__item--fluid kt-grid kt-grid--hor&quot;]/div[@class=&quot;kt-grid__item kt-grid__item--fluid kt-login__wrapper&quot;]/div[@class=&quot;kt-login__container&quot;]/div[@class=&quot;kt-login__signin&quot;]/form[@id=&quot;login-form&quot;]/div[@class=&quot;input-group&quot;]/input[@id=&quot;username&quot;]</value>
      <webElementGuid>50ce250f-6cb0-41e5-ba68-7038de20eb00</webElementGuid>
   </webElementProperties>
   <webElementProperties>
      <isSelected>false</isSelected>
      <matchCondition>equals</matchCondition>
      <name>xpath</name>
      <type>Main</type>
      <value>/html[@class=&quot;wf-poppins-n3-active wf-poppins-n5-active wf-poppins-n7-active wf-poppins-n4-active wf-poppins-n6-active wf-active&quot;]/body[@class=&quot;kt-page--loading-enabled kt-quick-panel--right kt-demo-panel--right kt-offcanvas-panel--right kt-header--fixed kt-header--minimize-menu kt-header-mobile--fixed kt-subheader--enabled kt-subheader--transparent kt-aside--enabled kt-aside--left kt-aside--fixed&quot;]</value>
      <webElementGuid>5a4e20de-8266-40a2-bdef-b6e225510da4</webElementGuid>
   </webElementProperties>
   <webElementXpaths>
      <isSelected>false</isSelected>
      <matchCondition>equals</matchCondition>
      <name>xpath:position</name>
      <type>Main</type>
      <value>//body</value>
      <webElementGuid>1e4547fb-d29b-465b-9065-87027e3dcb3d</webElementGuid>
   </webElementXpaths>
   <webElementXpaths>
      <isSelected>false</isSelected>
      <matchCondition>equals</matchCondition>
      <name>xpath:customAttributes</name>
      <type>Main</type>
      <value>//body[(text() = concat(&quot;
 Log in to your account
                               Select an option CANARY ISLAND   
                                    Login
                                

    




    
    
    Login
    
    
    
        WebFont.load({
            google: {
                &quot;families&quot;: [&quot;Poppins:300,400,500,600,700&quot;]
            },
            active: function () {
                sessionStorage.fonts = true;
            }
        });
    




    
        
            
                
                    
                        
                                                            
                                                    
                    

                    
                        
                            Log in to your account
                            
                        

                        
                        
                            
                                
                            

                            
                                
                            

                            
                                
                                    
                                        Select an option
                                                                                    CANARY ISLAND
                                                                            
                                
                            

                            
                            
                            
                                
                                    Login
                                
                            
                        
                    
                
            
        
    


    


/*&lt;![CDATA[*/        Sfjs = (function() {        &quot;use strict&quot;;        if (&quot; , &quot;'&quot; , &quot;classList&quot; , &quot;'&quot; , &quot; in document.documentElement) {            var hasClass = function (el, cssClass) { return el.classList.contains(cssClass); };            var removeClass = function(el, cssClass) { el.classList.remove(cssClass); };            var addClass = function(el, cssClass) { el.classList.add(cssClass); };            var toggleClass = function(el, cssClass) { el.classList.toggle(cssClass); };        } else {            var hasClass = function (el, cssClass) { return el.className.match(new RegExp(&quot; , &quot;'&quot; , &quot;\\b&quot; , &quot;'&quot; , &quot; + cssClass + &quot; , &quot;'&quot; , &quot;\\b&quot; , &quot;'&quot; , &quot;)); };            var removeClass = function(el, cssClass) { el.className = el.className.replace(new RegExp(&quot; , &quot;'&quot; , &quot;\\b&quot; , &quot;'&quot; , &quot; + cssClass + &quot; , &quot;'&quot; , &quot;\\b&quot; , &quot;'&quot; , &quot;), &quot; , &quot;'&quot; , &quot; &quot; , &quot;'&quot; , &quot;); };            var addClass = function(el, cssClass) { if (!hasClass(el, cssClass)) { el.className += &quot; &quot; + cssClass; } };            var toggleClass = function(el, cssClass) { hasClass(el, cssClass) ? removeClass(el, cssClass) : addClass(el, cssClass); };        }        var noop = function() {};        var profilerStorageKey = &quot; , &quot;'&quot; , &quot;symfony/profiler/&quot; , &quot;'&quot; , &quot;;        var request = function(url, onSuccess, onError, payload, options) {            var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject(&quot; , &quot;'&quot; , &quot;Microsoft.XMLHTTP&quot; , &quot;'&quot; , &quot;);            options = options || {};            options.maxTries = options.maxTries || 0;            xhr.open(options.method || &quot; , &quot;'&quot; , &quot;GET&quot; , &quot;'&quot; , &quot;, url, true);            xhr.setRequestHeader(&quot; , &quot;'&quot; , &quot;X-Requested-With&quot; , &quot;'&quot; , &quot;, &quot; , &quot;'&quot; , &quot;XMLHttpRequest&quot; , &quot;'&quot; , &quot;);            xhr.onreadystatechange = function(state) {                if (4 !== xhr.readyState) {                    return null;                }                if (xhr.status == 404 &amp;&amp; options.maxTries > 1) {                    setTimeout(function(){                        options.maxTries--;                        request(url, onSuccess, onError, payload, options);                    }, 1000);                    return null;                }                if (200 === xhr.status) {                    (onSuccess || noop)(xhr);                } else {                    (onError || noop)(xhr);                }            };            xhr.send(payload || &quot; , &quot;'&quot; , &quot;&quot; , &quot;'&quot; , &quot;);        };        var getPreference = function(name) {            if (!window.localStorage) {                return null;            }            return localStorage.getItem(profilerStorageKey + name);        };        var setPreference = function(name, value) {            if (!window.localStorage) {                return null;            }            localStorage.setItem(profilerStorageKey + name, value);        };        var requestStack = [];        var extractHeaders = function(xhr, stackElement) {            /* Here we avoid to call xhr.getResponseHeader in order to */            /* prevent polluting the console with CORS security errors */            var allHeaders = xhr.getAllResponseHeaders();            var ret;            if (ret = allHeaders.match(/^x-debug-token:\s+(.*)$/im)) {                stackElement.profile = ret[1];            }            if (ret = allHeaders.match(/^x-debug-token-link:\s+(.*)$/im)) {                stackElement.profilerUrl = ret[1];            }            if (ret = allHeaders.match(/^Symfony-Debug-Toolbar-Replace:\s+(.*)$/im)) {                stackElement.toolbarReplaceFinished = false;                stackElement.toolbarReplace = &quot; , &quot;'&quot; , &quot;1&quot; , &quot;'&quot; , &quot; === ret[1];            }        };        var successStreak = 4;        var pendingRequests = 0;        var renderAjaxRequests = function() {            var requestCounter = document.querySelector(&quot; , &quot;'&quot; , &quot;.sf-toolbar-ajax-request-counter&quot; , &quot;'&quot; , &quot;);            if (!requestCounter) {                return;            }            requestCounter.textContent = requestStack.length;            var infoSpan = document.querySelector(&quot;.sf-toolbar-ajax-info&quot;);            if (infoSpan) {                infoSpan.textContent = requestStack.length + &quot; , &quot;'&quot; , &quot; AJAX request&quot; , &quot;'&quot; , &quot; + (requestStack.length !== 1 ? &quot; , &quot;'&quot; , &quot;s&quot; , &quot;'&quot; , &quot; : &quot; , &quot;'&quot; , &quot;&quot; , &quot;'&quot; , &quot;);            }            var ajaxToolbarPanel = document.querySelector(&quot; , &quot;'&quot; , &quot;.sf-toolbar-block-ajax&quot; , &quot;'&quot; , &quot;);            if (requestStack.length) {                ajaxToolbarPanel.style.display = &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot;;            } else {                ajaxToolbarPanel.style.display = &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;;            }            if (pendingRequests > 0) {                addClass(ajaxToolbarPanel, &quot; , &quot;'&quot; , &quot;sf-ajax-request-loading&quot; , &quot;'&quot; , &quot;);            } else if (successStreak &lt; 4) {                addClass(ajaxToolbarPanel, &quot; , &quot;'&quot; , &quot;sf-toolbar-status-red&quot; , &quot;'&quot; , &quot;);                removeClass(ajaxToolbarPanel, &quot; , &quot;'&quot; , &quot;sf-ajax-request-loading&quot; , &quot;'&quot; , &quot;);            } else {                removeClass(ajaxToolbarPanel, &quot; , &quot;'&quot; , &quot;sf-ajax-request-loading&quot; , &quot;'&quot; , &quot;);                removeClass(ajaxToolbarPanel, &quot; , &quot;'&quot; , &quot;sf-toolbar-status-red&quot; , &quot;'&quot; , &quot;);            }        };        var startAjaxRequest = function(index) {            var tbody = document.querySelector(&quot; , &quot;'&quot; , &quot;.sf-toolbar-ajax-request-list&quot; , &quot;'&quot; , &quot;);            if (!tbody) {                return;            }            var nbOfAjaxRequest = tbody.rows.length;            if (nbOfAjaxRequest >= 100) {                tbody.deleteRow(0);            }            var request = requestStack[index];            pendingRequests++;            var row = document.createElement(&quot; , &quot;'&quot; , &quot;tr&quot; , &quot;'&quot; , &quot;);            request.DOMNode = row;            var requestNumberCell = document.createElement(&quot; , &quot;'&quot; , &quot;td&quot; , &quot;'&quot; , &quot;);            requestNumberCell.textContent = index + 1;            row.appendChild(requestNumberCell);            var profilerCell = document.createElement(&quot; , &quot;'&quot; , &quot;td&quot; , &quot;'&quot; , &quot;);            profilerCell.textContent = &quot; , &quot;'&quot; , &quot;n/a&quot; , &quot;'&quot; , &quot;;            row.appendChild(profilerCell);            var methodCell = document.createElement(&quot; , &quot;'&quot; , &quot;td&quot; , &quot;'&quot; , &quot;);            methodCell.textContent = request.method;            row.appendChild(methodCell);            var typeCell = document.createElement(&quot; , &quot;'&quot; , &quot;td&quot; , &quot;'&quot; , &quot;);            typeCell.textContent = request.type;            row.appendChild(typeCell);            var statusCodeCell = document.createElement(&quot; , &quot;'&quot; , &quot;td&quot; , &quot;'&quot; , &quot;);            var statusCode = document.createElement(&quot; , &quot;'&quot; , &quot;span&quot; , &quot;'&quot; , &quot;);            statusCode.textContent = &quot; , &quot;'&quot; , &quot;n/a&quot; , &quot;'&quot; , &quot;;            statusCodeCell.appendChild(statusCode);            row.appendChild(statusCodeCell);            var pathCell = document.createElement(&quot; , &quot;'&quot; , &quot;td&quot; , &quot;'&quot; , &quot;);            pathCell.className = &quot; , &quot;'&quot; , &quot;sf-ajax-request-url&quot; , &quot;'&quot; , &quot;;            if (&quot; , &quot;'&quot; , &quot;GET&quot; , &quot;'&quot; , &quot; === request.method) {                var pathLink = document.createElement(&quot; , &quot;'&quot; , &quot;a&quot; , &quot;'&quot; , &quot;);                pathLink.setAttribute(&quot; , &quot;'&quot; , &quot;href&quot; , &quot;'&quot; , &quot;, request.url);                pathLink.textContent = request.url;                pathCell.appendChild(pathLink);            } else {                pathCell.textContent = request.url;            }            pathCell.setAttribute(&quot; , &quot;'&quot; , &quot;title&quot; , &quot;'&quot; , &quot;, request.url);            row.appendChild(pathCell);            var durationCell = document.createElement(&quot; , &quot;'&quot; , &quot;td&quot; , &quot;'&quot; , &quot;);            durationCell.className = &quot; , &quot;'&quot; , &quot;sf-ajax-request-duration&quot; , &quot;'&quot; , &quot;;            durationCell.textContent = &quot; , &quot;'&quot; , &quot;n/a&quot; , &quot;'&quot; , &quot;;            row.appendChild(durationCell);            request.liveDurationHandle = setInterval(function() {                durationCell.textContent = (new Date() - request.start) + &quot; , &quot;'&quot; , &quot;ms&quot; , &quot;'&quot; , &quot;;            }, 100);            row.className = &quot; , &quot;'&quot; , &quot;sf-ajax-request sf-ajax-request-loading&quot; , &quot;'&quot; , &quot;;            tbody.insertBefore(row, null);            var toolbarInfo = document.querySelector(&quot; , &quot;'&quot; , &quot;.sf-toolbar-block-ajax .sf-toolbar-info&quot; , &quot;'&quot; , &quot;);            toolbarInfo.scrollTop = toolbarInfo.scrollHeight;            renderAjaxRequests();        };        var finishAjaxRequest = function(index) {            var request = requestStack[index];            clearInterval(request.liveDurationHandle);            if (!request.DOMNode) {                return;            }            if (request.toolbarReplace &amp;&amp; !request.toolbarReplaceFinished &amp;&amp; request.profile) {                /* Flag as complete because finishAjaxRequest can be called multiple times. */                request.toolbarReplaceFinished = true;                /* Search up through the DOM to find the toolbar&quot; , &quot;'&quot; , &quot;s container ID. */                for (var elem = request.DOMNode; elem &amp;&amp; elem !== document; elem = elem.parentNode) {                    if (elem.id.match(/^sfwdt/)) {                        Sfjs.loadToolbar(elem.id.replace(/^sfwdt/, &quot; , &quot;'&quot; , &quot;&quot; , &quot;'&quot; , &quot;), request.profile);                        break;                    }                }            }            pendingRequests--;            var row = request.DOMNode;            /* Unpack the children from the row */            var profilerCell = row.children[1];            var methodCell = row.children[2];            var statusCodeCell = row.children[4];            var statusCodeElem = statusCodeCell.children[0];            var durationCell = row.children[6];            if (request.error) {                row.className = &quot; , &quot;'&quot; , &quot;sf-ajax-request sf-ajax-request-error&quot; , &quot;'&quot; , &quot;;                methodCell.className = &quot; , &quot;'&quot; , &quot;sf-ajax-request-error&quot; , &quot;'&quot; , &quot;;                successStreak = 0;            } else {                row.className = &quot; , &quot;'&quot; , &quot;sf-ajax-request sf-ajax-request-ok&quot; , &quot;'&quot; , &quot;;                successStreak++;            }            if (request.statusCode) {                if (request.statusCode &lt; 300) {                    statusCodeElem.setAttribute(&quot; , &quot;'&quot; , &quot;class&quot; , &quot;'&quot; , &quot;, &quot; , &quot;'&quot; , &quot;sf-toolbar-status&quot; , &quot;'&quot; , &quot;);                } else if (request.statusCode &lt; 400) {                    statusCodeElem.setAttribute(&quot; , &quot;'&quot; , &quot;class&quot; , &quot;'&quot; , &quot;, &quot; , &quot;'&quot; , &quot;sf-toolbar-status sf-toolbar-status-yellow&quot; , &quot;'&quot; , &quot;);                } else {                    statusCodeElem.setAttribute(&quot; , &quot;'&quot; , &quot;class&quot; , &quot;'&quot; , &quot;, &quot; , &quot;'&quot; , &quot;sf-toolbar-status sf-toolbar-status-red&quot; , &quot;'&quot; , &quot;);                }                statusCodeElem.textContent = request.statusCode;            } else {                statusCodeElem.setAttribute(&quot; , &quot;'&quot; , &quot;class&quot; , &quot;'&quot; , &quot;, &quot; , &quot;'&quot; , &quot;sf-toolbar-status sf-toolbar-status-red&quot; , &quot;'&quot; , &quot;);            }            if (request.duration) {                durationCell.textContent = request.duration + &quot; , &quot;'&quot; , &quot;ms&quot; , &quot;'&quot; , &quot;;            }            if (request.profilerUrl) {                profilerCell.textContent = &quot; , &quot;'&quot; , &quot;&quot; , &quot;'&quot; , &quot;;                var profilerLink = document.createElement(&quot; , &quot;'&quot; , &quot;a&quot; , &quot;'&quot; , &quot;);                profilerLink.setAttribute(&quot; , &quot;'&quot; , &quot;href&quot; , &quot;'&quot; , &quot;, request.statusCode &lt; 400 ? request.profilerUrl : request.profilerUrl + &quot; , &quot;'&quot; , &quot;?panel=exception&quot; , &quot;'&quot; , &quot;);                profilerLink.textContent = request.profile;                profilerCell.appendChild(profilerLink);            }            renderAjaxRequests();        };        var addEventListener;        var el = document.createElement(&quot; , &quot;'&quot; , &quot;div&quot; , &quot;'&quot; , &quot;);        if (!(&quot; , &quot;'&quot; , &quot;addEventListener&quot; , &quot;'&quot; , &quot; in el)) {            addEventListener = function (element, eventName, callback) {                element.attachEvent(&quot; , &quot;'&quot; , &quot;on&quot; , &quot;'&quot; , &quot; + eventName, callback);            };        } else {            addEventListener = function (element, eventName, callback) {                element.addEventListener(eventName, callback, false);            };        }                    if (window.fetch &amp;&amp; window.fetch.polyfill === undefined) {                var oldFetch = window.fetch;                window.fetch = function () {                    var promise = oldFetch.apply(this, arguments);                    var url = arguments[0];                    var params = arguments[1];                    var paramType = Object.prototype.toString.call(arguments[0]);                    if (paramType === &quot; , &quot;'&quot; , &quot;[object Request]&quot; , &quot;'&quot; , &quot;) {                        url = arguments[0].url;                        params = {                            method: arguments[0].method,                            credentials: arguments[0].credentials,                            headers: arguments[0].headers,                            mode: arguments[0].mode,                            redirect: arguments[0].redirect                        };                    } else {                        url = String(url);                    }                    if (!url.match(new RegExp(&quot;^\/((index|app(_[\\w]+)?)\\.php\/)?_wdt&quot;))) {                        var method = &quot; , &quot;'&quot; , &quot;GET&quot; , &quot;'&quot; , &quot;;                        if (params &amp;&amp; params.method !== undefined) {                            method = params.method;                        }                        var stackElement = {                            error: false,                            url: url,                            method: method,                            type: &quot; , &quot;'&quot; , &quot;fetch&quot; , &quot;'&quot; , &quot;,                            start: new Date()                        };                        var idx = requestStack.push(stackElement) - 1;                        promise.then(function (r) {                            stackElement.duration = new Date() - stackElement.start;                            stackElement.error = r.status &lt; 200 || r.status >= 400;                            stackElement.statusCode = r.status;                            stackElement.profile = r.headers.get(&quot; , &quot;'&quot; , &quot;x-debug-token&quot; , &quot;'&quot; , &quot;);                            stackElement.profilerUrl = r.headers.get(&quot; , &quot;'&quot; , &quot;x-debug-token-link&quot; , &quot;'&quot; , &quot;);                            stackElement.toolbarReplaceFinished = false;                            stackElement.toolbarReplace = &quot; , &quot;'&quot; , &quot;1&quot; , &quot;'&quot; , &quot; === r.headers.get(&quot; , &quot;'&quot; , &quot;Symfony-Debug-Toolbar-Replace&quot; , &quot;'&quot; , &quot;);                            finishAjaxRequest(idx);                        }, function (e){                            stackElement.error = true;                            finishAjaxRequest(idx);                        });                        startAjaxRequest(idx);                    }                    return promise;                };            }            if (window.XMLHttpRequest &amp;&amp; XMLHttpRequest.prototype.addEventListener) {                var proxied = XMLHttpRequest.prototype.open;                XMLHttpRequest.prototype.open = function(method, url, async, user, pass) {                    var self = this;                    /* prevent logging AJAX calls to static and inline files, like templates */                    var path = url;                    if (url.substr(0, 1) === &quot; , &quot;'&quot; , &quot;/&quot; , &quot;'&quot; , &quot;) {                        if (0 === url.indexOf(&quot; , &quot;'&quot; , &quot;&quot; , &quot;'&quot; , &quot;)) {                            path = url.substr(0);                        }                    }                    else if (0 === url.indexOf(&quot; , &quot;'&quot; , &quot;http\u003A\/\/pre\u002Dpricing.recordgo.cloud&quot; , &quot;'&quot; , &quot;)) {                        path = url.substr(33);                    }                    if (!path.match(new RegExp(&quot;^\/((index|app(_[\\w]+)?)\\.php\/)?_wdt&quot;))) {                        var stackElement = {                            error: false,                            url: url,                            method: method,                            type: &quot; , &quot;'&quot; , &quot;xhr&quot; , &quot;'&quot; , &quot;,                            start: new Date()                        };                        var idx = requestStack.push(stackElement) - 1;                        this.addEventListener(&quot; , &quot;'&quot; , &quot;readystatechange&quot; , &quot;'&quot; , &quot;, function() {                            if (self.readyState == 4) {                                stackElement.duration = new Date() - stackElement.start;                                stackElement.error = self.status &lt; 200 || self.status >= 400;                                stackElement.statusCode = self.status;                                extractHeaders(self, stackElement);                                finishAjaxRequest(idx);                            }                        }, false);                        startAjaxRequest(idx);                    }                    proxied.apply(this, Array.prototype.slice.call(arguments));                };            }                return {            hasClass: hasClass,            removeClass: removeClass,            addClass: addClass,            toggleClass: toggleClass,            getPreference: getPreference,            setPreference: setPreference,            addEventListener: addEventListener,            request: request,            renderAjaxRequests: renderAjaxRequests,            load: function(selector, url, onSuccess, onError, options) {                var el = document.getElementById(selector);                if (el &amp;&amp; el.getAttribute(&quot; , &quot;'&quot; , &quot;data-sfurl&quot; , &quot;'&quot; , &quot;) !== url) {                    request(                        url,                        function(xhr) {                            el.innerHTML = xhr.responseText;                            el.setAttribute(&quot; , &quot;'&quot; , &quot;data-sfurl&quot; , &quot;'&quot; , &quot;, url);                            removeClass(el, &quot; , &quot;'&quot; , &quot;loading&quot; , &quot;'&quot; , &quot;);                            var pending = pendingRequests;                            for (var i = 0; i &lt; requestStack.length; i++) {                                startAjaxRequest(i);                                if (requestStack[i].duration) {                                    finishAjaxRequest(i);                                }                            }                            /* Revert the pending state in case there was a start called without a finish above. */                            pendingRequests = pending;                            (onSuccess || noop)(xhr, el);                        },                        function(xhr) { (onError || noop)(xhr, el); },                        &quot; , &quot;'&quot; , &quot;&quot; , &quot;'&quot; , &quot;,                        options                    );                }                return this;            },            loadToolbar: function(token, newToken) {                newToken = (newToken || token);                this.load(                    &quot; , &quot;'&quot; , &quot;sfwdt&quot; , &quot;'&quot; , &quot; + token,                    &quot; , &quot;'&quot; , &quot;\/_wdt\/xxxxxx&quot; , &quot;'&quot; , &quot;.replace(/xxxxxx/, newToken),                    function(xhr, el) {                        /* Evaluate in global scope scripts embedded inside the toolbar */                        var i, scripts = [].slice.call(el.querySelectorAll(&quot; , &quot;'&quot; , &quot;script&quot; , &quot;'&quot; , &quot;));                        for (i = 0; i &lt; scripts.length; ++i) {                            eval.call({}, scripts[i].firstChild.nodeValue);                        }                        el.style.display = -1 !== xhr.responseText.indexOf(&quot; , &quot;'&quot; , &quot;sf-toolbarreset&quot; , &quot;'&quot; , &quot;) ? &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot; : &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;;                        if (el.style.display == &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;) {                            return;                        }                        if (getPreference(&quot; , &quot;'&quot; , &quot;toolbar/displayState&quot; , &quot;'&quot; , &quot;) == &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;) {                            document.getElementById(&quot; , &quot;'&quot; , &quot;sfToolbarMainContent-&quot; , &quot;'&quot; , &quot; + newToken).style.display = &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;;                            document.getElementById(&quot; , &quot;'&quot; , &quot;sfToolbarClearer-&quot; , &quot;'&quot; , &quot; + newToken).style.display = &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;;                            document.getElementById(&quot; , &quot;'&quot; , &quot;sfMiniToolbar-&quot; , &quot;'&quot; , &quot; + newToken).style.display = &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot;;                        } else {                            document.getElementById(&quot; , &quot;'&quot; , &quot;sfToolbarMainContent-&quot; , &quot;'&quot; , &quot; + newToken).style.display = &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot;;                            document.getElementById(&quot; , &quot;'&quot; , &quot;sfToolbarClearer-&quot; , &quot;'&quot; , &quot; + newToken).style.display = &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot;;                            document.getElementById(&quot; , &quot;'&quot; , &quot;sfMiniToolbar-&quot; , &quot;'&quot; , &quot; + newToken).style.display = &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;;                        }                        /* Handle toolbar-info position */                        var toolbarBlocks = [].slice.call(el.querySelectorAll(&quot; , &quot;'&quot; , &quot;.sf-toolbar-block&quot; , &quot;'&quot; , &quot;));                        for (i = 0; i &lt; toolbarBlocks.length; ++i) {                            toolbarBlocks[i].onmouseover = function () {                                var toolbarInfo = this.querySelectorAll(&quot; , &quot;'&quot; , &quot;.sf-toolbar-info&quot; , &quot;'&quot; , &quot;)[0];                                var pageWidth = document.body.clientWidth;                                var elementWidth = toolbarInfo.offsetWidth;                                var leftValue = (elementWidth + this.offsetLeft) - pageWidth;                                var rightValue = (elementWidth + (pageWidth - this.offsetLeft)) - pageWidth;                                /* Reset right and left value, useful on window resize */                                toolbarInfo.style.right = &quot; , &quot;'&quot; , &quot;&quot; , &quot;'&quot; , &quot;;                                toolbarInfo.style.left = &quot; , &quot;'&quot; , &quot;&quot; , &quot;'&quot; , &quot;;                                if (elementWidth > pageWidth) {                                    toolbarInfo.style.left = 0;                                }                                else if (leftValue > 0 &amp;&amp; rightValue > 0) {                                    toolbarInfo.style.right = (rightValue * -1) + &quot; , &quot;'&quot; , &quot;px&quot; , &quot;'&quot; , &quot;;                                } else if (leftValue &lt; 0) {                                    toolbarInfo.style.left = 0;                                } else {                                    toolbarInfo.style.right = &quot; , &quot;'&quot; , &quot;0px&quot; , &quot;'&quot; , &quot;;                                }                            };                        }                        addEventListener(document.getElementById(&quot; , &quot;'&quot; , &quot;sfToolbarHideButton-&quot; , &quot;'&quot; , &quot; + newToken), &quot; , &quot;'&quot; , &quot;click&quot; , &quot;'&quot; , &quot;, function (event) {                            event.preventDefault();                            var p = this.parentNode;                            p.style.display = &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;;                            (p.previousElementSibling || p.previousSibling).style.display = &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;;                            document.getElementById(&quot; , &quot;'&quot; , &quot;sfMiniToolbar-&quot; , &quot;'&quot; , &quot; + newToken).style.display = &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot;;                            setPreference(&quot; , &quot;'&quot; , &quot;toolbar/displayState&quot; , &quot;'&quot; , &quot;, &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;);                        });                        addEventListener(document.getElementById(&quot; , &quot;'&quot; , &quot;sfToolbarMiniToggler-&quot; , &quot;'&quot; , &quot; + newToken), &quot; , &quot;'&quot; , &quot;click&quot; , &quot;'&quot; , &quot;, function (event) {                            event.preventDefault();                            var elem = this.parentNode;                            if (elem.style.display == &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;) {                                document.getElementById(&quot; , &quot;'&quot; , &quot;sfToolbarMainContent-&quot; , &quot;'&quot; , &quot; + newToken).style.display = &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;;                                document.getElementById(&quot; , &quot;'&quot; , &quot;sfToolbarClearer-&quot; , &quot;'&quot; , &quot; + newToken).style.display = &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;;                                elem.style.display = &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot;;                            } else {                                document.getElementById(&quot; , &quot;'&quot; , &quot;sfToolbarMainContent-&quot; , &quot;'&quot; , &quot; + newToken).style.display = &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot;;                                document.getElementById(&quot; , &quot;'&quot; , &quot;sfToolbarClearer-&quot; , &quot;'&quot; , &quot; + newToken).style.display = &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot;;                                elem.style.display = &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;                            }                            setPreference(&quot; , &quot;'&quot; , &quot;toolbar/displayState&quot; , &quot;'&quot; , &quot;, &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot;);                        });                        renderAjaxRequests();                        addEventListener(document.querySelector(&quot; , &quot;'&quot; , &quot;.sf-toolbar-block-ajax&quot; , &quot;'&quot; , &quot;), &quot; , &quot;'&quot; , &quot;mouseenter&quot; , &quot;'&quot; , &quot;, function (event) {                            var elem = document.querySelector(&quot; , &quot;'&quot; , &quot;.sf-toolbar-block-ajax .sf-toolbar-info&quot; , &quot;'&quot; , &quot;);                            elem.scrollTop = elem.scrollHeight;                        });                        addEventListener(document.querySelector(&quot; , &quot;'&quot; , &quot;.sf-toolbar-block-ajax > .sf-toolbar-icon&quot; , &quot;'&quot; , &quot;), &quot; , &quot;'&quot; , &quot;click&quot; , &quot;'&quot; , &quot;, function (event) {                            event.preventDefault();                            toggleClass(this.parentNode, &quot; , &quot;'&quot; , &quot;hover&quot; , &quot;'&quot; , &quot;);                        });                        var dumpInfo = document.querySelector(&quot; , &quot;'&quot; , &quot;.sf-toolbar-block-dump .sf-toolbar-info&quot; , &quot;'&quot; , &quot;);                        if (null !== dumpInfo) {                            addEventListener(dumpInfo, &quot; , &quot;'&quot; , &quot;sfbeforedumpcollapse&quot; , &quot;'&quot; , &quot;, function () {                                dumpInfo.style.minHeight = dumpInfo.getBoundingClientRect().height+&quot; , &quot;'&quot; , &quot;px&quot; , &quot;'&quot; , &quot;;                            });                            addEventListener(dumpInfo, &quot; , &quot;'&quot; , &quot;mouseleave&quot; , &quot;'&quot; , &quot;, function () {                                dumpInfo.style.minHeight = &quot; , &quot;'&quot; , &quot;&quot; , &quot;'&quot; , &quot;;                            });                        }                    },                    function(xhr) {                        if (xhr.status !== 0) {                            var sfwdt = document.getElementById(&quot; , &quot;'&quot; , &quot;sfwdt&quot; , &quot;'&quot; , &quot; + token);                            sfwdt.innerHTML = &quot; , &quot;'&quot; , &quot;\                                &lt;div class=&quot;sf-toolbarreset&quot;>\                                    &lt;div class=&quot;sf-toolbar-icon&quot;>&lt;svg width=&quot;26&quot; height=&quot;28&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 26 28&quot; enable-background=&quot;new 0 0 26 28&quot; xml:space=&quot;preserve&quot;>&lt;path fill=&quot;#FFFFFF&quot; d=&quot;M13 0C5.8 0 0 5.8 0 13c0 7.2 5.8 13 13 13c7.2 0 13-5.8 13-13C26 5.8 20.2 0 13 0z M20 7.5 c-0.6 0-1-0.3-1-0.9c0-0.2 0-0.4 0.2-0.6c0.1-0.3 0.2-0.3 0.2-0.4c0-0.3-0.5-0.4-0.7-0.4c-2 0.1-2.5 2.7-2.9 4.8l-0.2 1.1 c1.1 0.2 1.9 0 2.4-0.3c0.6-0.4-0.2-0.8-0.1-1.3C18 9.2 18.4 9 18.7 8.9c0.5 0 0.8 0.5 0.8 1c0 0.8-1.1 2-3.3 1.9 c-0.3 0-0.5 0-0.7-0.1L15 14.1c-0.4 1.7-0.9 4.1-2.6 6.2c-1.5 1.8-3.1 2.1-3.8 2.1c-1.3 0-2.1-0.6-2.2-1.6c0-0.9 0.8-1.4 1.3-1.4 c0.7 0 1.2 0.5 1.2 1.1c0 0.5-0.2 0.6-0.4 0.7c-0.1 0.1-0.3 0.2-0.3 0.4c0 0.1 0.1 0.3 0.4 0.3c0.5 0 0.9-0.3 1.2-0.5 c1.3-1 1.7-2.9 2.4-6.2l0.1-0.8c0.2-1.1 0.5-2.3 0.8-3.5c-0.9-0.7-1.4-1.5-2.6-1.8c-0.8-0.2-1.3 0-1.7 0.4C8.4 10 8.6 10.7 9 11.1 l0.7 0.7c0.8 0.9 1.3 1.7 1.1 2.7c-0.3 1.6-2.1 2.8-4.3 2.1c-1.9-0.6-2.2-1.9-2-2.7c0.2-0.6 0.7-0.8 1.2-0.6 c0.5 0.2 0.7 0.8 0.6 1.3c0 0.1 0 0.1-0.1 0.3C6 15 5.9 15.2 5.9 15.3c-0.1 0.4 0.4 0.7 0.8 0.8c0.8 0.3 1.7-0.2 1.9-0.9 c0.2-0.6-0.2-1.1-0.4-1.2l-0.8-0.9c-0.4-0.4-1.2-1.5-0.8-2.8c0.2-0.5 0.5-1 0.9-1.4c1-0.7 2-0.8 3-0.6c1.3 0.4 1.9 1.2 2.8 1.9 c0.5-1.3 1.1-2.6 2-3.8c0.9-1 2-1.7 3.3-1.8C20 4.8 21 5.4 21 6.3C21 6.7 20.8 7.5 20 7.5z&quot;/>&lt;/svg>&lt;/div>\                                    An error occurred while loading the web debug toolbar. &lt;a href=&quot;\/_profiler\/&quot; , &quot;'&quot; , &quot; + newToken + &quot; , &quot;'&quot; , &quot;>Open the web profiler.&lt;/a>\                                &lt;/div>\                            &quot; , &quot;'&quot; , &quot;;                            sfwdt.setAttribute(&quot; , &quot;'&quot; , &quot;class&quot; , &quot;'&quot; , &quot;, &quot; , &quot;'&quot; , &quot;sf-toolbar sf-error-toolbar&quot; , &quot;'&quot; , &quot;);                        }                    },                    { maxTries: 5 }                );                return this;            },            toggle: function(selector, elOn, elOff) {                var tmp = elOn.style.display,                    el = document.getElementById(selector);                elOn.style.display = elOff.style.display;                elOff.style.display = tmp;                if (el) {                    el.style.display = &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot; === tmp ? &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot; : &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot;;                }                return this;            },            createTabs: function() {                var tabGroups = document.querySelectorAll(&quot; , &quot;'&quot; , &quot;.sf-tabs:not([data-processed=true])&quot; , &quot;'&quot; , &quot;);                /* create the tab navigation for each group of tabs */                for (var i = 0; i &lt; tabGroups.length; i++) {                    var tabs = tabGroups[i].querySelectorAll(&quot; , &quot;'&quot; , &quot;:scope > .tab&quot; , &quot;'&quot; , &quot;);                    var tabNavigation = document.createElement(&quot; , &quot;'&quot; , &quot;ul&quot; , &quot;'&quot; , &quot;);                    tabNavigation.className = &quot; , &quot;'&quot; , &quot;tab-navigation&quot; , &quot;'&quot; , &quot;;                    var selectedTabId = &quot; , &quot;'&quot; , &quot;tab-&quot; , &quot;'&quot; , &quot; + i + &quot; , &quot;'&quot; , &quot;-0&quot; , &quot;'&quot; , &quot;; /* select the first tab by default */                    for (var j = 0; j &lt; tabs.length; j++) {                        var tabId = &quot; , &quot;'&quot; , &quot;tab-&quot; , &quot;'&quot; , &quot; + i + &quot; , &quot;'&quot; , &quot;-&quot; , &quot;'&quot; , &quot; + j;                        var tabTitle = tabs[j].querySelector(&quot; , &quot;'&quot; , &quot;.tab-title&quot; , &quot;'&quot; , &quot;).innerHTML;                        var tabNavigationItem = document.createElement(&quot; , &quot;'&quot; , &quot;li&quot; , &quot;'&quot; , &quot;);                        tabNavigationItem.setAttribute(&quot; , &quot;'&quot; , &quot;data-tab-id&quot; , &quot;'&quot; , &quot;, tabId);                        if (hasClass(tabs[j], &quot; , &quot;'&quot; , &quot;active&quot; , &quot;'&quot; , &quot;)) { selectedTabId = tabId; }                        if (hasClass(tabs[j], &quot; , &quot;'&quot; , &quot;disabled&quot; , &quot;'&quot; , &quot;)) { addClass(tabNavigationItem, &quot; , &quot;'&quot; , &quot;disabled&quot; , &quot;'&quot; , &quot;); }                        tabNavigationItem.innerHTML = tabTitle;                        tabNavigation.appendChild(tabNavigationItem);                        var tabContent = tabs[j].querySelector(&quot; , &quot;'&quot; , &quot;.tab-content&quot; , &quot;'&quot; , &quot;);                        tabContent.parentElement.setAttribute(&quot; , &quot;'&quot; , &quot;id&quot; , &quot;'&quot; , &quot;, tabId);                    }                    tabGroups[i].insertBefore(tabNavigation, tabGroups[i].firstChild);                    addClass(document.querySelector(&quot; , &quot;'&quot; , &quot;[data-tab-id=&quot;&quot; , &quot;'&quot; , &quot; + selectedTabId + &quot; , &quot;'&quot; , &quot;&quot;]&quot; , &quot;'&quot; , &quot;), &quot; , &quot;'&quot; , &quot;active&quot; , &quot;'&quot; , &quot;);                }                /* display the active tab and add the &quot; , &quot;'&quot; , &quot;click&quot; , &quot;'&quot; , &quot; event listeners */                for (i = 0; i &lt; tabGroups.length; i++) {                    tabNavigation = tabGroups[i].querySelectorAll(&quot; , &quot;'&quot; , &quot;:scope > .tab-navigation li&quot; , &quot;'&quot; , &quot;);                    for (j = 0; j &lt; tabNavigation.length; j++) {                        tabId = tabNavigation[j].getAttribute(&quot; , &quot;'&quot; , &quot;data-tab-id&quot; , &quot;'&quot; , &quot;);                        document.getElementById(tabId).querySelector(&quot; , &quot;'&quot; , &quot;.tab-title&quot; , &quot;'&quot; , &quot;).className = &quot; , &quot;'&quot; , &quot;hidden&quot; , &quot;'&quot; , &quot;;                        if (hasClass(tabNavigation[j], &quot; , &quot;'&quot; , &quot;active&quot; , &quot;'&quot; , &quot;)) {                            document.getElementById(tabId).className = &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot;;                        } else {                            document.getElementById(tabId).className = &quot; , &quot;'&quot; , &quot;hidden&quot; , &quot;'&quot; , &quot;;                        }                        tabNavigation[j].addEventListener(&quot; , &quot;'&quot; , &quot;click&quot; , &quot;'&quot; , &quot;, function(e) {                            var activeTab = e.target || e.srcElement;                            /* needed because when the tab contains HTML contents, user can click */                            /* on any of those elements instead of their parent &quot; , &quot;'&quot; , &quot;&lt;li>&quot; , &quot;'&quot; , &quot; element */                            while (activeTab.tagName.toLowerCase() !== &quot; , &quot;'&quot; , &quot;li&quot; , &quot;'&quot; , &quot;) {                                activeTab = activeTab.parentNode;                            }                            /* get the full list of tabs through the parent of the active tab element */                            var tabNavigation = activeTab.parentNode.children;                            for (var k = 0; k &lt; tabNavigation.length; k++) {                                var tabId = tabNavigation[k].getAttribute(&quot; , &quot;'&quot; , &quot;data-tab-id&quot; , &quot;'&quot; , &quot;);                                document.getElementById(tabId).className = &quot; , &quot;'&quot; , &quot;hidden&quot; , &quot;'&quot; , &quot;;                                removeClass(tabNavigation[k], &quot; , &quot;'&quot; , &quot;active&quot; , &quot;'&quot; , &quot;);                            }                            addClass(activeTab, &quot; , &quot;'&quot; , &quot;active&quot; , &quot;'&quot; , &quot;);                            var activeTabId = activeTab.getAttribute(&quot; , &quot;'&quot; , &quot;data-tab-id&quot; , &quot;'&quot; , &quot;);                            document.getElementById(activeTabId).className = &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot;;                        });                    }                    tabGroups[i].setAttribute(&quot; , &quot;'&quot; , &quot;data-processed&quot; , &quot;'&quot; , &quot;, &quot; , &quot;'&quot; , &quot;true&quot; , &quot;'&quot; , &quot;);                }            },            createToggles: function() {                var toggles = document.querySelectorAll(&quot; , &quot;'&quot; , &quot;.sf-toggle:not([data-processed=true])&quot; , &quot;'&quot; , &quot;);                for (var i = 0; i &lt; toggles.length; i++) {                    var elementSelector = toggles[i].getAttribute(&quot; , &quot;'&quot; , &quot;data-toggle-selector&quot; , &quot;'&quot; , &quot;);                    var element = document.querySelector(elementSelector);                    addClass(element, &quot; , &quot;'&quot; , &quot;sf-toggle-content&quot; , &quot;'&quot; , &quot;);                    if (toggles[i].hasAttribute(&quot; , &quot;'&quot; , &quot;data-toggle-initial&quot; , &quot;'&quot; , &quot;) &amp;&amp; toggles[i].getAttribute(&quot; , &quot;'&quot; , &quot;data-toggle-initial&quot; , &quot;'&quot; , &quot;) == &quot; , &quot;'&quot; , &quot;display&quot; , &quot;'&quot; , &quot;) {                        addClass(toggles[i], &quot; , &quot;'&quot; , &quot;sf-toggle-on&quot; , &quot;'&quot; , &quot;);                        addClass(element, &quot; , &quot;'&quot; , &quot;sf-toggle-visible&quot; , &quot;'&quot; , &quot;);                    } else {                        addClass(toggles[i], &quot; , &quot;'&quot; , &quot;sf-toggle-off&quot; , &quot;'&quot; , &quot;);                        addClass(element, &quot; , &quot;'&quot; , &quot;sf-toggle-hidden&quot; , &quot;'&quot; , &quot;);                    }                    addEventListener(toggles[i], &quot; , &quot;'&quot; , &quot;click&quot; , &quot;'&quot; , &quot;, function(e) {                        e.preventDefault();                        if (&quot; , &quot;'&quot; , &quot;&quot; , &quot;'&quot; , &quot; !== window.getSelection().toString()) {                            /* Don&quot; , &quot;'&quot; , &quot;t do anything on text selection */                            return;                        }                        var toggle = e.target || e.srcElement;                        /* needed because when the toggle contains HTML contents, user can click */                        /* on any of those elements instead of their parent &quot; , &quot;'&quot; , &quot;.sf-toggle&quot; , &quot;'&quot; , &quot; element */                        while (!hasClass(toggle, &quot; , &quot;'&quot; , &quot;sf-toggle&quot; , &quot;'&quot; , &quot;)) {                            toggle = toggle.parentNode;                        }                        var element = document.querySelector(toggle.getAttribute(&quot; , &quot;'&quot; , &quot;data-toggle-selector&quot; , &quot;'&quot; , &quot;));                        toggleClass(toggle, &quot; , &quot;'&quot; , &quot;sf-toggle-on&quot; , &quot;'&quot; , &quot;);                        toggleClass(toggle, &quot; , &quot;'&quot; , &quot;sf-toggle-off&quot; , &quot;'&quot; , &quot;);                        toggleClass(element, &quot; , &quot;'&quot; , &quot;sf-toggle-hidden&quot; , &quot;'&quot; , &quot;);                        toggleClass(element, &quot; , &quot;'&quot; , &quot;sf-toggle-visible&quot; , &quot;'&quot; , &quot;);                        /* the toggle doesn&quot; , &quot;'&quot; , &quot;t change its contents when clicking on it */                        if (!toggle.hasAttribute(&quot; , &quot;'&quot; , &quot;data-toggle-alt-content&quot; , &quot;'&quot; , &quot;)) {                            return;                        }                        if (!toggle.hasAttribute(&quot; , &quot;'&quot; , &quot;data-toggle-original-content&quot; , &quot;'&quot; , &quot;)) {                            toggle.setAttribute(&quot; , &quot;'&quot; , &quot;data-toggle-original-content&quot; , &quot;'&quot; , &quot;, toggle.innerHTML);                        }                        var currentContent = toggle.innerHTML;                        var originalContent = toggle.getAttribute(&quot; , &quot;'&quot; , &quot;data-toggle-original-content&quot; , &quot;'&quot; , &quot;);                        var altContent = toggle.getAttribute(&quot; , &quot;'&quot; , &quot;data-toggle-alt-content&quot; , &quot;'&quot; , &quot;);                        toggle.innerHTML = currentContent !== altContent ? altContent : originalContent;                    });                    /* Prevents from disallowing clicks on links inside toggles */                    var toggleLinks = toggles[i].querySelectorAll(&quot; , &quot;'&quot; , &quot;a&quot; , &quot;'&quot; , &quot;);                    for (var j = 0; j &lt; toggleLinks.length; j++) {                        addEventListener(toggleLinks[j], &quot; , &quot;'&quot; , &quot;click&quot; , &quot;'&quot; , &quot;, function(e) {                            e.stopPropagation();                        });                    }                    toggles[i].setAttribute(&quot; , &quot;'&quot; , &quot;data-processed&quot; , &quot;'&quot; , &quot;, &quot; , &quot;'&quot; , &quot;true&quot; , &quot;'&quot; , &quot;);                }            },            createFilters: function() {                document.querySelectorAll(&quot; , &quot;'&quot; , &quot;[data-filters] [data-filter]&quot; , &quot;'&quot; , &quot;).forEach(function (filter) {                    var filters = filter.closest(&quot; , &quot;'&quot; , &quot;[data-filters]&quot; , &quot;'&quot; , &quot;),                        type = &quot; , &quot;'&quot; , &quot;choice&quot; , &quot;'&quot; , &quot;,                        name = filter.dataset.filter,                        ucName = name.charAt(0).toUpperCase()+name.slice(1),                        list = document.createElement(&quot; , &quot;'&quot; , &quot;ul&quot; , &quot;'&quot; , &quot;),                        values = filters.dataset[&quot; , &quot;'&quot; , &quot;filter&quot; , &quot;'&quot; , &quot;+ucName] || filters.querySelectorAll(&quot; , &quot;'&quot; , &quot;[data-filter-&quot; , &quot;'&quot; , &quot;+name+&quot; , &quot;'&quot; , &quot;]&quot; , &quot;'&quot; , &quot;),                        labels = {},                        defaults = null,                        indexed = {},                        processed = {};                    if (typeof values === &quot; , &quot;'&quot; , &quot;string&quot; , &quot;'&quot; , &quot;) {                        type = &quot; , &quot;'&quot; , &quot;level&quot; , &quot;'&quot; , &quot;;                        labels = values.split(&quot; , &quot;'&quot; , &quot;,&quot; , &quot;'&quot; , &quot;);                        values = values.toLowerCase().split(&quot; , &quot;'&quot; , &quot;,&quot; , &quot;'&quot; , &quot;);                        defaults = values.length - 1;                    }                    addClass(list, &quot; , &quot;'&quot; , &quot;filter-list&quot; , &quot;'&quot; , &quot;);                    addClass(list, &quot; , &quot;'&quot; , &quot;filter-list-&quot; , &quot;'&quot; , &quot;+type);                    values.forEach(function (value, i) {                        if (value instanceof HTMLElement) {                            value = value.dataset[&quot; , &quot;'&quot; , &quot;filter&quot; , &quot;'&quot; , &quot;+ucName];                        }                        if (value in processed) {                            return;                        }                        var option = document.createElement(&quot; , &quot;'&quot; , &quot;li&quot; , &quot;'&quot; , &quot;),                            label = i in labels ? labels[i] : value,                            active = false,                            matches;                        if (&quot; , &quot;'&quot; , &quot;&quot; , &quot;'&quot; , &quot; === label) {                            option.innerHTML = &quot; , &quot;'&quot; , &quot;&lt;em>(none)&lt;/em>&quot; , &quot;'&quot; , &quot;;                        } else {                            option.innerText = label;                        }                        option.dataset.filter = value;                        option.setAttribute(&quot; , &quot;'&quot; , &quot;title&quot; , &quot;'&quot; , &quot;, 1 === (matches = filters.querySelectorAll(&quot; , &quot;'&quot; , &quot;[data-filter-&quot; , &quot;'&quot; , &quot;+name+&quot; , &quot;'&quot; , &quot;=&quot;&quot; , &quot;'&quot; , &quot;+value+&quot; , &quot;'&quot; , &quot;&quot;]&quot; , &quot;'&quot; , &quot;).length) ? &quot; , &quot;'&quot; , &quot;Matches 1 row&quot; , &quot;'&quot; , &quot; : &quot; , &quot;'&quot; , &quot;Matches &quot; , &quot;'&quot; , &quot;+matches+&quot; , &quot;'&quot; , &quot; rows&quot; , &quot;'&quot; , &quot;);                        indexed[value] = i;                        list.appendChild(option);                        addEventListener(option, &quot; , &quot;'&quot; , &quot;click&quot; , &quot;'&quot; , &quot;, function () {                            if (&quot; , &quot;'&quot; , &quot;choice&quot; , &quot;'&quot; , &quot; === type) {                                filters.querySelectorAll(&quot; , &quot;'&quot; , &quot;[data-filter-&quot; , &quot;'&quot; , &quot;+name+&quot; , &quot;'&quot; , &quot;]&quot; , &quot;'&quot; , &quot;).forEach(function (row) {                                    if (option.dataset.filter === row.dataset[&quot; , &quot;'&quot; , &quot;filter&quot; , &quot;'&quot; , &quot;+ucName]) {                                        toggleClass(row, &quot; , &quot;'&quot; , &quot;filter-hidden-&quot; , &quot;'&quot; , &quot;+name);                                    }                                });                                toggleClass(option, &quot; , &quot;'&quot; , &quot;active&quot; , &quot;'&quot; , &quot;);                            } else if (&quot; , &quot;'&quot; , &quot;level&quot; , &quot;'&quot; , &quot; === type) {                                if (i === this.parentNode.querySelectorAll(&quot; , &quot;'&quot; , &quot;.active&quot; , &quot;'&quot; , &quot;).length - 1) {                                    return;                                }                                this.parentNode.querySelectorAll(&quot; , &quot;'&quot; , &quot;li&quot; , &quot;'&quot; , &quot;).forEach(function (currentOption, j) {                                    if (j &lt;= i) {                                        addClass(currentOption, &quot; , &quot;'&quot; , &quot;active&quot; , &quot;'&quot; , &quot;);                                        if (i === j) {                                            addClass(currentOption, &quot; , &quot;'&quot; , &quot;last-active&quot; , &quot;'&quot; , &quot;);                                        } else {                                            removeClass(currentOption, &quot; , &quot;'&quot; , &quot;last-active&quot; , &quot;'&quot; , &quot;);                                        }                                    } else {                                        removeClass(currentOption, &quot; , &quot;'&quot; , &quot;active&quot; , &quot;'&quot; , &quot;);                                        removeClass(currentOption, &quot; , &quot;'&quot; , &quot;last-active&quot; , &quot;'&quot; , &quot;);                                    }                                });                                filters.querySelectorAll(&quot; , &quot;'&quot; , &quot;[data-filter-&quot; , &quot;'&quot; , &quot;+name+&quot; , &quot;'&quot; , &quot;]&quot; , &quot;'&quot; , &quot;).forEach(function (row) {                                    if (i &lt; indexed[row.dataset[&quot; , &quot;'&quot; , &quot;filter&quot; , &quot;'&quot; , &quot;+ucName]]) {                                        addClass(row, &quot; , &quot;'&quot; , &quot;filter-hidden-&quot; , &quot;'&quot; , &quot;+name);                                    } else {                                        removeClass(row, &quot; , &quot;'&quot; , &quot;filter-hidden-&quot; , &quot;'&quot; , &quot;+name);                                    }                                });                            }                        });                        if (&quot; , &quot;'&quot; , &quot;choice&quot; , &quot;'&quot; , &quot; === type) {                            active = null === defaults || 0 &lt;= defaults.indexOf(value);                        } else if (&quot; , &quot;'&quot; , &quot;level&quot; , &quot;'&quot; , &quot; === type) {                            active = i &lt;= defaults;                            if (active &amp;&amp; i === defaults) {                                addClass(option, &quot; , &quot;'&quot; , &quot;last-active&quot; , &quot;'&quot; , &quot;);                            }                        }                        if (active) {                            addClass(option, &quot; , &quot;'&quot; , &quot;active&quot; , &quot;'&quot; , &quot;);                        } else {                            filters.querySelectorAll(&quot; , &quot;'&quot; , &quot;[data-filter-&quot; , &quot;'&quot; , &quot;+name+&quot; , &quot;'&quot; , &quot;=&quot;&quot; , &quot;'&quot; , &quot;+value+&quot; , &quot;'&quot; , &quot;&quot;]&quot; , &quot;'&quot; , &quot;).forEach(function (row) {                                toggleClass(row, &quot; , &quot;'&quot; , &quot;filter-hidden-&quot; , &quot;'&quot; , &quot;+name);                            });                        }                        processed[value] = true;                    });                    if (1 &lt; list.childNodes.length) {                        filter.appendChild(list);                        filter.dataset.filtered = &quot; , &quot;'&quot; , &quot;&quot; , &quot;'&quot; , &quot;;                    }                });            }        };    })();    Sfjs.addEventListener(document, &quot; , &quot;'&quot; , &quot;DOMContentLoaded&quot; , &quot;'&quot; , &quot;, function() {        Sfjs.createTabs();        Sfjs.createToggles();    });/*]]&gt;*/    .sf-minitoolbar {    background-color: #222;    border-top-left-radius: 4px;    bottom: 0;    box-sizing: border-box;    display: none;    height: 36px;    padding: 6px;    position: fixed;    right: 0;    z-index: 99999;}.sf-minitoolbar a {    display: block;}.sf-minitoolbar svg,.sf-minitoolbar img {    max-height: 24px;    max-width: 24px;    display: inline;}.sf-toolbar-clearer {    clear: both;    height: 36px;}.sf-display-none {    display: none;}.sf-toolbarreset * {    box-sizing: content-box;    vertical-align: baseline;    letter-spacing: normal;    width: auto;}.sf-toolbarreset {    background-color: #222;    bottom: 0;    box-shadow: 0 -1px 0 rgba(0, 0, 0, 0.2);    color: #EEE;    font: 11px Arial, sans-serif;    left: 0;    margin: 0;    padding: 0 36px 0 0;    position: fixed;    right: 0;    text-align: left;    text-transform: none;    z-index: 99999;    direction: ltr;    /* neutralize the aliasing defined by external CSS styles */    -webkit-font-smoothing: subpixel-antialiased;    -moz-osx-font-smoothing: auto;}.sf-toolbarreset abbr {    border: dashed #777;    border-width: 0 0 1px;}.sf-toolbarreset svg,.sf-toolbarreset img {    height: 20px;    width: 20px;    display: inline-block;}.sf-toolbarreset .hide-button {    background: #444;    display: block;    position: absolute;    top: 0;    right: 0;    width: 36px;    height: 36px;    cursor: pointer;    text-align: center;}.sf-toolbarreset .hide-button svg {    max-height: 18px;    margin-top: 10px;}.sf-toolbar-block {    cursor: default;    display: block;    float: left;    height: 36px;    margin-right: 0;    white-space: nowrap;    max-width: 15%;}.sf-toolbar-block > a,.sf-toolbar-block > a:hover {    display: block;    text-decoration: none;    color: inherit;}.sf-toolbar-block span {    display: inline-block;}.sf-toolbar-block .sf-toolbar-value {    color: #F5F5F5;    font-size: 13px;    line-height: 36px;    padding: 0;}.sf-toolbar-block .sf-toolbar-label,.sf-toolbar-block .sf-toolbar-class-separator {    color: #AAA;    font-size: 12px;}.sf-toolbar-block .sf-toolbar-info {    border-collapse: collapse;    display: table;    z-index: 100000;}.sf-toolbar-block hr {    border-top: 1px solid #777;    margin: 4px 0;    padding-top: 4px;}.sf-toolbar-block .sf-toolbar-info-piece {    /* this &quot; , &quot;'&quot; , &quot;border-bottom&quot; , &quot;'&quot; , &quot; trick is needed because &quot; , &quot;'&quot; , &quot;margin-bottom&quot; , &quot;'&quot; , &quot; doesn&quot; , &quot;'&quot; , &quot;t work for table rows */    border-bottom: solid transparent 3px;    display: table-row;}.sf-toolbar-block .sf-toolbar-info-piece-additional,.sf-toolbar-block .sf-toolbar-info-piece-additional-detail {    display: none;}.sf-toolbar-block .sf-toolbar-info-group {    margin-bottom: 4px;    padding-bottom: 2px;    border-bottom: 1px solid #333333;}.sf-toolbar-block .sf-toolbar-info-group:last-child {    margin-bottom: 0;    padding-bottom: 0;    border-bottom: none;}.sf-toolbar-block .sf-toolbar-info-piece .sf-toolbar-status {    padding: 2px 5px;    margin-bottom: 0;}.sf-toolbar-block .sf-toolbar-info-piece .sf-toolbar-status + .sf-toolbar-status {    margin-left: 4px;}.sf-toolbar-block .sf-toolbar-info-piece:last-child {    margin-bottom: 0;}div.sf-toolbar .sf-toolbar-block .sf-toolbar-info-piece a {    color: #99CDD8;    text-decoration: underline;}div.sf-toolbar .sf-toolbar-block a:hover {    text-decoration: none;}.sf-toolbar-block .sf-toolbar-info-piece b {    color: #AAA;    display: table-cell;    font-size: 11px;    padding: 4px 8px 4px 0;}.sf-toolbar-block:not(.sf-toolbar-block-dump) .sf-toolbar-info-piece span {    color: #F5F5F5;}.sf-toolbar-block .sf-toolbar-info-piece span {    font-size: 12px;}.sf-toolbar-block .sf-toolbar-info {    background-color: #444;    bottom: 36px;    color: #F5F5F5;    display: none;    padding: 9px 0;    position: absolute;}.sf-toolbar-block .sf-toolbar-info:empty {    visibility: hidden;}.sf-toolbar-block .sf-toolbar-status {    display: inline-block;    color: #FFF;    background-color: #666;    padding: 3px 6px;    margin-bottom: 2px;    vertical-align: middle;    min-width: 15px;    min-height: 13px;    text-align: center;}.sf-toolbar-block .sf-toolbar-status-green {    background-color: #4F805D;}.sf-toolbar-block .sf-toolbar-status-red {    background-color: #B0413E;}.sf-toolbar-block .sf-toolbar-status-yellow {    background-color: #A46A1F;}.sf-toolbar-block.sf-toolbar-status-green {    background-color: #4F805D;    color: #FFF;}.sf-toolbar-block.sf-toolbar-status-red {    background-color: #B0413E;    color: #FFF;}.sf-toolbar-block.sf-toolbar-status-yellow {    background-color: #A46A1F;    color: #FFF;}.sf-toolbar-block-request .sf-toolbar-status {    color: #FFF;    display: inline-block;    font-size: 14px;    height: 36px;    line-height: 36px;    padding: 0 10px;}.sf-toolbar-block-request .sf-toolbar-info-piece a {    text-decoration: none;}.sf-toolbar-block-request .sf-toolbar-info-piece a:hover {    text-decoration: underline;}.sf-toolbar-block-request .sf-toolbar-redirection-status {    font-weight: normal;    padding: 2px 4px;    line-height: 18px;}.sf-toolbar-block-request .sf-toolbar-info-piece span.sf-toolbar-redirection-method {    font-size: 12px;    height: 17px;    line-height: 17px;    margin-right: 5px;}.sf-toolbar-block-ajax .sf-toolbar-icon {    cursor: pointer;}.sf-toolbar-status-green .sf-toolbar-label,.sf-toolbar-status-yellow .sf-toolbar-label,.sf-toolbar-status-red .sf-toolbar-label {    color: #FFF;}.sf-toolbar-status-green svg path,.sf-toolbar-status-green svg .sf-svg-path,.sf-toolbar-status-red svg path,.sf-toolbar-status-red svg .sf-svg-path,.sf-toolbar-status-yellow svg path,.sf-toolbar-status-yellow svg .sf-svg-path {    fill: #FFF;}.sf-toolbar-block-config svg path,.sf-toolbar-block-config svg .sf-svg-path {    fill: #FFF;}.sf-toolbar-block .sf-toolbar-icon {    display: block;    height: 36px;    padding: 0 7px;    overflow: hidden;    text-overflow: ellipsis;}.sf-toolbar-block-request .sf-toolbar-icon {    padding-left: 0;    padding-right: 0;}.sf-toolbar-block .sf-toolbar-icon img,.sf-toolbar-block .sf-toolbar-icon svg {    border-width: 0;    position: relative;    top: 8px;    vertical-align: baseline;}.sf-toolbar-block .sf-toolbar-icon img + span,.sf-toolbar-block .sf-toolbar-icon svg + span {    margin-left: 4px;}.sf-toolbar-block-config .sf-toolbar-icon .sf-toolbar-value {    margin-left: 4px;}.sf-toolbar-block:hover,.sf-toolbar-block.hover {    position: relative;}.sf-toolbar-block:hover .sf-toolbar-icon,.sf-toolbar-block.hover .sf-toolbar-icon {    background-color: #444;    position: relative;    z-index: 10002;}.sf-toolbar-block-ajax.hover .sf-toolbar-info {    z-index: 10001;}.sf-toolbar-block:hover .sf-toolbar-info,.sf-toolbar-block.hover .sf-toolbar-info {    display: block;    padding: 10px;    max-width: 480px;    max-height: 480px;    word-wrap: break-word;    overflow: hidden;    overflow-y: auto;}.sf-toolbar-info-piece b.sf-toolbar-ajax-info {    color: #F5F5F5;}.sf-toolbar-ajax-requests {    table-layout: auto;    width: 100%;}.sf-toolbar-ajax-requests td {    background-color: #444;    border-bottom: 1px solid #777;    color: #F5F5F5;    font-size: 12px;    padding: 4px;}.sf-toolbar-ajax-requests tr:last-child td {    border-bottom: 0;}.sf-toolbar-ajax-requests th {    background-color: #222;    border-bottom: 0;    color: #AAA;    font-size: 11px;    padding: 4px;}.sf-ajax-request-url {    max-width: 250px;    line-height: 9px;    overflow: hidden;    text-overflow: ellipsis;}.sf-toolbar-ajax-requests .sf-ajax-request-url a {    text-decoration: none;}.sf-toolbar-ajax-requests .sf-ajax-request-url a:hover {    text-decoration: underline;}.sf-ajax-request-duration {    text-align: right;}.sf-ajax-request-loading {    animation: sf-blink .5s ease-in-out infinite;}@keyframes sf-blink {    0% { background: #222; }    50% { background: #444; }    100% { background: #222; }}.sf-toolbar-block.sf-toolbar-block-dump .sf-toolbar-info {    max-width: none;    width: 100%;    position: fixed;    box-sizing: border-box;    left: 0;}.sf-toolbar-block-dump pre.sf-dump {    background-color: #222;    border-color: #777;    border-radius: 0;    margin: 6px 0 12px 0;}.sf-toolbar-block-dump pre.sf-dump:last-child {    margin-bottom: 0;}.sf-toolbar-block-dump pre.sf-dump .sf-dump-search-wrapper {    margin-bottom: 5px;}.sf-toolbar-block-dump pre.sf-dump span.sf-dump-search-count {    color: #333;    font-size: 12px;}.sf-toolbar-block-dump .sf-toolbar-info-piece {    display: block;}.sf-toolbar-block-dump .sf-toolbar-info-piece .sf-toolbar-file-line {    color: #AAA;    margin-left: 4px;}.sf-toolbar-block-dump .sf-toolbar-info img {    display: none;}/* Responsive Design */.sf-toolbar-icon .sf-toolbar-label,.sf-toolbar-icon .sf-toolbar-value {    display: none;}.sf-toolbar-block-config .sf-toolbar-icon .sf-toolbar-label {    display: inline-block;}/* Legacy Design - these styles are maintained to make old panels look   a bit better on the new toolbar */.sf-toolbar-block .sf-toolbar-info-piece-additional-detail {    color: #AAA;    font-size: 12px;}.sf-toolbar-status-green .sf-toolbar-info-piece-additional-detail,.sf-toolbar-status-yellow .sf-toolbar-info-piece-additional-detail,.sf-toolbar-status-red .sf-toolbar-info-piece-additional-detail {    color: #FFF;}@media (min-width: 768px) {    .sf-toolbar-icon .sf-toolbar-label,    .sf-toolbar-icon .sf-toolbar-value {        display: inline;    }    .sf-toolbar-block .sf-toolbar-icon img,    .sf-toolbar-block .sf-toolbar-icon svg {        top: 6px;    }    .sf-toolbar-block-time .sf-toolbar-icon svg,    .sf-toolbar-block-memory .sf-toolbar-icon svg {        display: none;    }    .sf-toolbar-block-time .sf-toolbar-icon svg + span,    .sf-toolbar-block-memory .sf-toolbar-icon svg + span {        margin-left: 0;    }    .sf-toolbar-block .sf-toolbar-icon {        padding: 0 10px;    }    .sf-toolbar-block-time .sf-toolbar-icon {        padding-right: 5px;    }    .sf-toolbar-block-memory .sf-toolbar-icon {        padding-left: 5px;    }    .sf-toolbar-block-request .sf-toolbar-icon {        padding-left: 0;        padding-right: 0;    }    .sf-toolbar-block-request .sf-toolbar-label {        margin-left: 5px;    }    .sf-toolbar-block-request .sf-toolbar-status + svg {        margin-left: 5px;    }    .sf-toolbar-block-request .sf-toolbar-icon svg + .sf-toolbar-label {        margin-left: 0;     }    .sf-toolbar-block-request .sf-toolbar-label + .sf-toolbar-value {        margin-right: 10px;    }    .sf-toolbar-block-request:hover .sf-toolbar-info {        max-width: none;    }    .sf-toolbar-block .sf-toolbar-info-piece b {        font-size: 12px;    }    .sf-toolbar-block .sf-toolbar-info-piece span {        font-size: 13px;    }    .sf-toolbar-block-right {        float: right;        margin-left: 0;        margin-right: 0;    }}@media (min-width: 1024px) {    .sf-toolbar-block .sf-toolbar-info-piece-additional,    .sf-toolbar-block .sf-toolbar-info-piece-additional-detail {        display: inline;    }    .sf-toolbar-block .sf-toolbar-info-piece-additional:empty,    .sf-toolbar-block .sf-toolbar-info-piece-additional-detail:empty {        display: none;    }}/***** Error Toolbar *****/.sf-error-toolbar .sf-toolbarreset {    background: #222;    color: #f5f5f5;    font: 13px/36px Arial, sans-serif;    height: 36px;    padding: 0 15px;    text-align: left;}.sf-error-toolbar .sf-toolbarreset svg {    height: auto;}.sf-error-toolbar .sf-toolbarreset a {    color: #99cdd8;    margin-left: 5px;    text-decoration: underline;}.sf-error-toolbar .sf-toolbarreset a:hover {    text-decoration: none;}.sf-error-toolbar .sf-toolbarreset .sf-toolbar-icon {    float: left;    padding: 5px 0;    margin-right: 10px;}/***** Media query print: Do not print the Toolbar. *****/@media print {    .sf-toolbar {        display: none;    }}/*&lt;![CDATA[*/    (function () {        Sfjs.loadToolbar(&quot; , &quot;'&quot; , &quot;5bf6c7&quot; , &quot;'&quot; , &quot;);    })();/*]]&gt;*/


/html[@class=&quot;wf-poppins-n3-active wf-poppins-n5-active wf-poppins-n7-active wf-poppins-n4-active wf-poppins-n6-active wf-active&quot;]/body[@class=&quot;kt-page--loading-enabled kt-quick-panel--right kt-demo-panel--right kt-offcanvas-panel--right kt-header--fixed kt-header--minimize-menu kt-header-mobile--fixed kt-subheader--enabled kt-subheader--transparent kt-aside--enabled kt-aside--left kt-aside--fixed&quot;]/div[@id=&quot;app&quot;]/div[@id=&quot;kt_login&quot;]/div[@class=&quot;kt-grid__item kt-grid__item--fluid kt-grid kt-grid--hor&quot;]/div[@class=&quot;kt-grid__item kt-grid__item--fluid kt-login__wrapper&quot;]/div[@class=&quot;kt-login__container&quot;]/div[@class=&quot;kt-login__signin&quot;]/form[@id=&quot;login-form&quot;]/div[@class=&quot;input-group&quot;]/input[@id=&quot;username&quot;]&quot;) or . = concat(&quot;
 Log in to your account
                               Select an option CANARY ISLAND   
                                    Login
                                

    




    
    
    Login
    
    
    
        WebFont.load({
            google: {
                &quot;families&quot;: [&quot;Poppins:300,400,500,600,700&quot;]
            },
            active: function () {
                sessionStorage.fonts = true;
            }
        });
    




    
        
            
                
                    
                        
                                                            
                                                    
                    

                    
                        
                            Log in to your account
                            
                        

                        
                        
                            
                                
                            

                            
                                
                            

                            
                                
                                    
                                        Select an option
                                                                                    CANARY ISLAND
                                                                            
                                
                            

                            
                            
                            
                                
                                    Login
                                
                            
                        
                    
                
            
        
    


    


/*&lt;![CDATA[*/        Sfjs = (function() {        &quot;use strict&quot;;        if (&quot; , &quot;'&quot; , &quot;classList&quot; , &quot;'&quot; , &quot; in document.documentElement) {            var hasClass = function (el, cssClass) { return el.classList.contains(cssClass); };            var removeClass = function(el, cssClass) { el.classList.remove(cssClass); };            var addClass = function(el, cssClass) { el.classList.add(cssClass); };            var toggleClass = function(el, cssClass) { el.classList.toggle(cssClass); };        } else {            var hasClass = function (el, cssClass) { return el.className.match(new RegExp(&quot; , &quot;'&quot; , &quot;\\b&quot; , &quot;'&quot; , &quot; + cssClass + &quot; , &quot;'&quot; , &quot;\\b&quot; , &quot;'&quot; , &quot;)); };            var removeClass = function(el, cssClass) { el.className = el.className.replace(new RegExp(&quot; , &quot;'&quot; , &quot;\\b&quot; , &quot;'&quot; , &quot; + cssClass + &quot; , &quot;'&quot; , &quot;\\b&quot; , &quot;'&quot; , &quot;), &quot; , &quot;'&quot; , &quot; &quot; , &quot;'&quot; , &quot;); };            var addClass = function(el, cssClass) { if (!hasClass(el, cssClass)) { el.className += &quot; &quot; + cssClass; } };            var toggleClass = function(el, cssClass) { hasClass(el, cssClass) ? removeClass(el, cssClass) : addClass(el, cssClass); };        }        var noop = function() {};        var profilerStorageKey = &quot; , &quot;'&quot; , &quot;symfony/profiler/&quot; , &quot;'&quot; , &quot;;        var request = function(url, onSuccess, onError, payload, options) {            var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject(&quot; , &quot;'&quot; , &quot;Microsoft.XMLHTTP&quot; , &quot;'&quot; , &quot;);            options = options || {};            options.maxTries = options.maxTries || 0;            xhr.open(options.method || &quot; , &quot;'&quot; , &quot;GET&quot; , &quot;'&quot; , &quot;, url, true);            xhr.setRequestHeader(&quot; , &quot;'&quot; , &quot;X-Requested-With&quot; , &quot;'&quot; , &quot;, &quot; , &quot;'&quot; , &quot;XMLHttpRequest&quot; , &quot;'&quot; , &quot;);            xhr.onreadystatechange = function(state) {                if (4 !== xhr.readyState) {                    return null;                }                if (xhr.status == 404 &amp;&amp; options.maxTries > 1) {                    setTimeout(function(){                        options.maxTries--;                        request(url, onSuccess, onError, payload, options);                    }, 1000);                    return null;                }                if (200 === xhr.status) {                    (onSuccess || noop)(xhr);                } else {                    (onError || noop)(xhr);                }            };            xhr.send(payload || &quot; , &quot;'&quot; , &quot;&quot; , &quot;'&quot; , &quot;);        };        var getPreference = function(name) {            if (!window.localStorage) {                return null;            }            return localStorage.getItem(profilerStorageKey + name);        };        var setPreference = function(name, value) {            if (!window.localStorage) {                return null;            }            localStorage.setItem(profilerStorageKey + name, value);        };        var requestStack = [];        var extractHeaders = function(xhr, stackElement) {            /* Here we avoid to call xhr.getResponseHeader in order to */            /* prevent polluting the console with CORS security errors */            var allHeaders = xhr.getAllResponseHeaders();            var ret;            if (ret = allHeaders.match(/^x-debug-token:\s+(.*)$/im)) {                stackElement.profile = ret[1];            }            if (ret = allHeaders.match(/^x-debug-token-link:\s+(.*)$/im)) {                stackElement.profilerUrl = ret[1];            }            if (ret = allHeaders.match(/^Symfony-Debug-Toolbar-Replace:\s+(.*)$/im)) {                stackElement.toolbarReplaceFinished = false;                stackElement.toolbarReplace = &quot; , &quot;'&quot; , &quot;1&quot; , &quot;'&quot; , &quot; === ret[1];            }        };        var successStreak = 4;        var pendingRequests = 0;        var renderAjaxRequests = function() {            var requestCounter = document.querySelector(&quot; , &quot;'&quot; , &quot;.sf-toolbar-ajax-request-counter&quot; , &quot;'&quot; , &quot;);            if (!requestCounter) {                return;            }            requestCounter.textContent = requestStack.length;            var infoSpan = document.querySelector(&quot;.sf-toolbar-ajax-info&quot;);            if (infoSpan) {                infoSpan.textContent = requestStack.length + &quot; , &quot;'&quot; , &quot; AJAX request&quot; , &quot;'&quot; , &quot; + (requestStack.length !== 1 ? &quot; , &quot;'&quot; , &quot;s&quot; , &quot;'&quot; , &quot; : &quot; , &quot;'&quot; , &quot;&quot; , &quot;'&quot; , &quot;);            }            var ajaxToolbarPanel = document.querySelector(&quot; , &quot;'&quot; , &quot;.sf-toolbar-block-ajax&quot; , &quot;'&quot; , &quot;);            if (requestStack.length) {                ajaxToolbarPanel.style.display = &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot;;            } else {                ajaxToolbarPanel.style.display = &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;;            }            if (pendingRequests > 0) {                addClass(ajaxToolbarPanel, &quot; , &quot;'&quot; , &quot;sf-ajax-request-loading&quot; , &quot;'&quot; , &quot;);            } else if (successStreak &lt; 4) {                addClass(ajaxToolbarPanel, &quot; , &quot;'&quot; , &quot;sf-toolbar-status-red&quot; , &quot;'&quot; , &quot;);                removeClass(ajaxToolbarPanel, &quot; , &quot;'&quot; , &quot;sf-ajax-request-loading&quot; , &quot;'&quot; , &quot;);            } else {                removeClass(ajaxToolbarPanel, &quot; , &quot;'&quot; , &quot;sf-ajax-request-loading&quot; , &quot;'&quot; , &quot;);                removeClass(ajaxToolbarPanel, &quot; , &quot;'&quot; , &quot;sf-toolbar-status-red&quot; , &quot;'&quot; , &quot;);            }        };        var startAjaxRequest = function(index) {            var tbody = document.querySelector(&quot; , &quot;'&quot; , &quot;.sf-toolbar-ajax-request-list&quot; , &quot;'&quot; , &quot;);            if (!tbody) {                return;            }            var nbOfAjaxRequest = tbody.rows.length;            if (nbOfAjaxRequest >= 100) {                tbody.deleteRow(0);            }            var request = requestStack[index];            pendingRequests++;            var row = document.createElement(&quot; , &quot;'&quot; , &quot;tr&quot; , &quot;'&quot; , &quot;);            request.DOMNode = row;            var requestNumberCell = document.createElement(&quot; , &quot;'&quot; , &quot;td&quot; , &quot;'&quot; , &quot;);            requestNumberCell.textContent = index + 1;            row.appendChild(requestNumberCell);            var profilerCell = document.createElement(&quot; , &quot;'&quot; , &quot;td&quot; , &quot;'&quot; , &quot;);            profilerCell.textContent = &quot; , &quot;'&quot; , &quot;n/a&quot; , &quot;'&quot; , &quot;;            row.appendChild(profilerCell);            var methodCell = document.createElement(&quot; , &quot;'&quot; , &quot;td&quot; , &quot;'&quot; , &quot;);            methodCell.textContent = request.method;            row.appendChild(methodCell);            var typeCell = document.createElement(&quot; , &quot;'&quot; , &quot;td&quot; , &quot;'&quot; , &quot;);            typeCell.textContent = request.type;            row.appendChild(typeCell);            var statusCodeCell = document.createElement(&quot; , &quot;'&quot; , &quot;td&quot; , &quot;'&quot; , &quot;);            var statusCode = document.createElement(&quot; , &quot;'&quot; , &quot;span&quot; , &quot;'&quot; , &quot;);            statusCode.textContent = &quot; , &quot;'&quot; , &quot;n/a&quot; , &quot;'&quot; , &quot;;            statusCodeCell.appendChild(statusCode);            row.appendChild(statusCodeCell);            var pathCell = document.createElement(&quot; , &quot;'&quot; , &quot;td&quot; , &quot;'&quot; , &quot;);            pathCell.className = &quot; , &quot;'&quot; , &quot;sf-ajax-request-url&quot; , &quot;'&quot; , &quot;;            if (&quot; , &quot;'&quot; , &quot;GET&quot; , &quot;'&quot; , &quot; === request.method) {                var pathLink = document.createElement(&quot; , &quot;'&quot; , &quot;a&quot; , &quot;'&quot; , &quot;);                pathLink.setAttribute(&quot; , &quot;'&quot; , &quot;href&quot; , &quot;'&quot; , &quot;, request.url);                pathLink.textContent = request.url;                pathCell.appendChild(pathLink);            } else {                pathCell.textContent = request.url;            }            pathCell.setAttribute(&quot; , &quot;'&quot; , &quot;title&quot; , &quot;'&quot; , &quot;, request.url);            row.appendChild(pathCell);            var durationCell = document.createElement(&quot; , &quot;'&quot; , &quot;td&quot; , &quot;'&quot; , &quot;);            durationCell.className = &quot; , &quot;'&quot; , &quot;sf-ajax-request-duration&quot; , &quot;'&quot; , &quot;;            durationCell.textContent = &quot; , &quot;'&quot; , &quot;n/a&quot; , &quot;'&quot; , &quot;;            row.appendChild(durationCell);            request.liveDurationHandle = setInterval(function() {                durationCell.textContent = (new Date() - request.start) + &quot; , &quot;'&quot; , &quot;ms&quot; , &quot;'&quot; , &quot;;            }, 100);            row.className = &quot; , &quot;'&quot; , &quot;sf-ajax-request sf-ajax-request-loading&quot; , &quot;'&quot; , &quot;;            tbody.insertBefore(row, null);            var toolbarInfo = document.querySelector(&quot; , &quot;'&quot; , &quot;.sf-toolbar-block-ajax .sf-toolbar-info&quot; , &quot;'&quot; , &quot;);            toolbarInfo.scrollTop = toolbarInfo.scrollHeight;            renderAjaxRequests();        };        var finishAjaxRequest = function(index) {            var request = requestStack[index];            clearInterval(request.liveDurationHandle);            if (!request.DOMNode) {                return;            }            if (request.toolbarReplace &amp;&amp; !request.toolbarReplaceFinished &amp;&amp; request.profile) {                /* Flag as complete because finishAjaxRequest can be called multiple times. */                request.toolbarReplaceFinished = true;                /* Search up through the DOM to find the toolbar&quot; , &quot;'&quot; , &quot;s container ID. */                for (var elem = request.DOMNode; elem &amp;&amp; elem !== document; elem = elem.parentNode) {                    if (elem.id.match(/^sfwdt/)) {                        Sfjs.loadToolbar(elem.id.replace(/^sfwdt/, &quot; , &quot;'&quot; , &quot;&quot; , &quot;'&quot; , &quot;), request.profile);                        break;                    }                }            }            pendingRequests--;            var row = request.DOMNode;            /* Unpack the children from the row */            var profilerCell = row.children[1];            var methodCell = row.children[2];            var statusCodeCell = row.children[4];            var statusCodeElem = statusCodeCell.children[0];            var durationCell = row.children[6];            if (request.error) {                row.className = &quot; , &quot;'&quot; , &quot;sf-ajax-request sf-ajax-request-error&quot; , &quot;'&quot; , &quot;;                methodCell.className = &quot; , &quot;'&quot; , &quot;sf-ajax-request-error&quot; , &quot;'&quot; , &quot;;                successStreak = 0;            } else {                row.className = &quot; , &quot;'&quot; , &quot;sf-ajax-request sf-ajax-request-ok&quot; , &quot;'&quot; , &quot;;                successStreak++;            }            if (request.statusCode) {                if (request.statusCode &lt; 300) {                    statusCodeElem.setAttribute(&quot; , &quot;'&quot; , &quot;class&quot; , &quot;'&quot; , &quot;, &quot; , &quot;'&quot; , &quot;sf-toolbar-status&quot; , &quot;'&quot; , &quot;);                } else if (request.statusCode &lt; 400) {                    statusCodeElem.setAttribute(&quot; , &quot;'&quot; , &quot;class&quot; , &quot;'&quot; , &quot;, &quot; , &quot;'&quot; , &quot;sf-toolbar-status sf-toolbar-status-yellow&quot; , &quot;'&quot; , &quot;);                } else {                    statusCodeElem.setAttribute(&quot; , &quot;'&quot; , &quot;class&quot; , &quot;'&quot; , &quot;, &quot; , &quot;'&quot; , &quot;sf-toolbar-status sf-toolbar-status-red&quot; , &quot;'&quot; , &quot;);                }                statusCodeElem.textContent = request.statusCode;            } else {                statusCodeElem.setAttribute(&quot; , &quot;'&quot; , &quot;class&quot; , &quot;'&quot; , &quot;, &quot; , &quot;'&quot; , &quot;sf-toolbar-status sf-toolbar-status-red&quot; , &quot;'&quot; , &quot;);            }            if (request.duration) {                durationCell.textContent = request.duration + &quot; , &quot;'&quot; , &quot;ms&quot; , &quot;'&quot; , &quot;;            }            if (request.profilerUrl) {                profilerCell.textContent = &quot; , &quot;'&quot; , &quot;&quot; , &quot;'&quot; , &quot;;                var profilerLink = document.createElement(&quot; , &quot;'&quot; , &quot;a&quot; , &quot;'&quot; , &quot;);                profilerLink.setAttribute(&quot; , &quot;'&quot; , &quot;href&quot; , &quot;'&quot; , &quot;, request.statusCode &lt; 400 ? request.profilerUrl : request.profilerUrl + &quot; , &quot;'&quot; , &quot;?panel=exception&quot; , &quot;'&quot; , &quot;);                profilerLink.textContent = request.profile;                profilerCell.appendChild(profilerLink);            }            renderAjaxRequests();        };        var addEventListener;        var el = document.createElement(&quot; , &quot;'&quot; , &quot;div&quot; , &quot;'&quot; , &quot;);        if (!(&quot; , &quot;'&quot; , &quot;addEventListener&quot; , &quot;'&quot; , &quot; in el)) {            addEventListener = function (element, eventName, callback) {                element.attachEvent(&quot; , &quot;'&quot; , &quot;on&quot; , &quot;'&quot; , &quot; + eventName, callback);            };        } else {            addEventListener = function (element, eventName, callback) {                element.addEventListener(eventName, callback, false);            };        }                    if (window.fetch &amp;&amp; window.fetch.polyfill === undefined) {                var oldFetch = window.fetch;                window.fetch = function () {                    var promise = oldFetch.apply(this, arguments);                    var url = arguments[0];                    var params = arguments[1];                    var paramType = Object.prototype.toString.call(arguments[0]);                    if (paramType === &quot; , &quot;'&quot; , &quot;[object Request]&quot; , &quot;'&quot; , &quot;) {                        url = arguments[0].url;                        params = {                            method: arguments[0].method,                            credentials: arguments[0].credentials,                            headers: arguments[0].headers,                            mode: arguments[0].mode,                            redirect: arguments[0].redirect                        };                    } else {                        url = String(url);                    }                    if (!url.match(new RegExp(&quot;^\/((index|app(_[\\w]+)?)\\.php\/)?_wdt&quot;))) {                        var method = &quot; , &quot;'&quot; , &quot;GET&quot; , &quot;'&quot; , &quot;;                        if (params &amp;&amp; params.method !== undefined) {                            method = params.method;                        }                        var stackElement = {                            error: false,                            url: url,                            method: method,                            type: &quot; , &quot;'&quot; , &quot;fetch&quot; , &quot;'&quot; , &quot;,                            start: new Date()                        };                        var idx = requestStack.push(stackElement) - 1;                        promise.then(function (r) {                            stackElement.duration = new Date() - stackElement.start;                            stackElement.error = r.status &lt; 200 || r.status >= 400;                            stackElement.statusCode = r.status;                            stackElement.profile = r.headers.get(&quot; , &quot;'&quot; , &quot;x-debug-token&quot; , &quot;'&quot; , &quot;);                            stackElement.profilerUrl = r.headers.get(&quot; , &quot;'&quot; , &quot;x-debug-token-link&quot; , &quot;'&quot; , &quot;);                            stackElement.toolbarReplaceFinished = false;                            stackElement.toolbarReplace = &quot; , &quot;'&quot; , &quot;1&quot; , &quot;'&quot; , &quot; === r.headers.get(&quot; , &quot;'&quot; , &quot;Symfony-Debug-Toolbar-Replace&quot; , &quot;'&quot; , &quot;);                            finishAjaxRequest(idx);                        }, function (e){                            stackElement.error = true;                            finishAjaxRequest(idx);                        });                        startAjaxRequest(idx);                    }                    return promise;                };            }            if (window.XMLHttpRequest &amp;&amp; XMLHttpRequest.prototype.addEventListener) {                var proxied = XMLHttpRequest.prototype.open;                XMLHttpRequest.prototype.open = function(method, url, async, user, pass) {                    var self = this;                    /* prevent logging AJAX calls to static and inline files, like templates */                    var path = url;                    if (url.substr(0, 1) === &quot; , &quot;'&quot; , &quot;/&quot; , &quot;'&quot; , &quot;) {                        if (0 === url.indexOf(&quot; , &quot;'&quot; , &quot;&quot; , &quot;'&quot; , &quot;)) {                            path = url.substr(0);                        }                    }                    else if (0 === url.indexOf(&quot; , &quot;'&quot; , &quot;http\u003A\/\/pre\u002Dpricing.recordgo.cloud&quot; , &quot;'&quot; , &quot;)) {                        path = url.substr(33);                    }                    if (!path.match(new RegExp(&quot;^\/((index|app(_[\\w]+)?)\\.php\/)?_wdt&quot;))) {                        var stackElement = {                            error: false,                            url: url,                            method: method,                            type: &quot; , &quot;'&quot; , &quot;xhr&quot; , &quot;'&quot; , &quot;,                            start: new Date()                        };                        var idx = requestStack.push(stackElement) - 1;                        this.addEventListener(&quot; , &quot;'&quot; , &quot;readystatechange&quot; , &quot;'&quot; , &quot;, function() {                            if (self.readyState == 4) {                                stackElement.duration = new Date() - stackElement.start;                                stackElement.error = self.status &lt; 200 || self.status >= 400;                                stackElement.statusCode = self.status;                                extractHeaders(self, stackElement);                                finishAjaxRequest(idx);                            }                        }, false);                        startAjaxRequest(idx);                    }                    proxied.apply(this, Array.prototype.slice.call(arguments));                };            }                return {            hasClass: hasClass,            removeClass: removeClass,            addClass: addClass,            toggleClass: toggleClass,            getPreference: getPreference,            setPreference: setPreference,            addEventListener: addEventListener,            request: request,            renderAjaxRequests: renderAjaxRequests,            load: function(selector, url, onSuccess, onError, options) {                var el = document.getElementById(selector);                if (el &amp;&amp; el.getAttribute(&quot; , &quot;'&quot; , &quot;data-sfurl&quot; , &quot;'&quot; , &quot;) !== url) {                    request(                        url,                        function(xhr) {                            el.innerHTML = xhr.responseText;                            el.setAttribute(&quot; , &quot;'&quot; , &quot;data-sfurl&quot; , &quot;'&quot; , &quot;, url);                            removeClass(el, &quot; , &quot;'&quot; , &quot;loading&quot; , &quot;'&quot; , &quot;);                            var pending = pendingRequests;                            for (var i = 0; i &lt; requestStack.length; i++) {                                startAjaxRequest(i);                                if (requestStack[i].duration) {                                    finishAjaxRequest(i);                                }                            }                            /* Revert the pending state in case there was a start called without a finish above. */                            pendingRequests = pending;                            (onSuccess || noop)(xhr, el);                        },                        function(xhr) { (onError || noop)(xhr, el); },                        &quot; , &quot;'&quot; , &quot;&quot; , &quot;'&quot; , &quot;,                        options                    );                }                return this;            },            loadToolbar: function(token, newToken) {                newToken = (newToken || token);                this.load(                    &quot; , &quot;'&quot; , &quot;sfwdt&quot; , &quot;'&quot; , &quot; + token,                    &quot; , &quot;'&quot; , &quot;\/_wdt\/xxxxxx&quot; , &quot;'&quot; , &quot;.replace(/xxxxxx/, newToken),                    function(xhr, el) {                        /* Evaluate in global scope scripts embedded inside the toolbar */                        var i, scripts = [].slice.call(el.querySelectorAll(&quot; , &quot;'&quot; , &quot;script&quot; , &quot;'&quot; , &quot;));                        for (i = 0; i &lt; scripts.length; ++i) {                            eval.call({}, scripts[i].firstChild.nodeValue);                        }                        el.style.display = -1 !== xhr.responseText.indexOf(&quot; , &quot;'&quot; , &quot;sf-toolbarreset&quot; , &quot;'&quot; , &quot;) ? &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot; : &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;;                        if (el.style.display == &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;) {                            return;                        }                        if (getPreference(&quot; , &quot;'&quot; , &quot;toolbar/displayState&quot; , &quot;'&quot; , &quot;) == &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;) {                            document.getElementById(&quot; , &quot;'&quot; , &quot;sfToolbarMainContent-&quot; , &quot;'&quot; , &quot; + newToken).style.display = &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;;                            document.getElementById(&quot; , &quot;'&quot; , &quot;sfToolbarClearer-&quot; , &quot;'&quot; , &quot; + newToken).style.display = &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;;                            document.getElementById(&quot; , &quot;'&quot; , &quot;sfMiniToolbar-&quot; , &quot;'&quot; , &quot; + newToken).style.display = &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot;;                        } else {                            document.getElementById(&quot; , &quot;'&quot; , &quot;sfToolbarMainContent-&quot; , &quot;'&quot; , &quot; + newToken).style.display = &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot;;                            document.getElementById(&quot; , &quot;'&quot; , &quot;sfToolbarClearer-&quot; , &quot;'&quot; , &quot; + newToken).style.display = &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot;;                            document.getElementById(&quot; , &quot;'&quot; , &quot;sfMiniToolbar-&quot; , &quot;'&quot; , &quot; + newToken).style.display = &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;;                        }                        /* Handle toolbar-info position */                        var toolbarBlocks = [].slice.call(el.querySelectorAll(&quot; , &quot;'&quot; , &quot;.sf-toolbar-block&quot; , &quot;'&quot; , &quot;));                        for (i = 0; i &lt; toolbarBlocks.length; ++i) {                            toolbarBlocks[i].onmouseover = function () {                                var toolbarInfo = this.querySelectorAll(&quot; , &quot;'&quot; , &quot;.sf-toolbar-info&quot; , &quot;'&quot; , &quot;)[0];                                var pageWidth = document.body.clientWidth;                                var elementWidth = toolbarInfo.offsetWidth;                                var leftValue = (elementWidth + this.offsetLeft) - pageWidth;                                var rightValue = (elementWidth + (pageWidth - this.offsetLeft)) - pageWidth;                                /* Reset right and left value, useful on window resize */                                toolbarInfo.style.right = &quot; , &quot;'&quot; , &quot;&quot; , &quot;'&quot; , &quot;;                                toolbarInfo.style.left = &quot; , &quot;'&quot; , &quot;&quot; , &quot;'&quot; , &quot;;                                if (elementWidth > pageWidth) {                                    toolbarInfo.style.left = 0;                                }                                else if (leftValue > 0 &amp;&amp; rightValue > 0) {                                    toolbarInfo.style.right = (rightValue * -1) + &quot; , &quot;'&quot; , &quot;px&quot; , &quot;'&quot; , &quot;;                                } else if (leftValue &lt; 0) {                                    toolbarInfo.style.left = 0;                                } else {                                    toolbarInfo.style.right = &quot; , &quot;'&quot; , &quot;0px&quot; , &quot;'&quot; , &quot;;                                }                            };                        }                        addEventListener(document.getElementById(&quot; , &quot;'&quot; , &quot;sfToolbarHideButton-&quot; , &quot;'&quot; , &quot; + newToken), &quot; , &quot;'&quot; , &quot;click&quot; , &quot;'&quot; , &quot;, function (event) {                            event.preventDefault();                            var p = this.parentNode;                            p.style.display = &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;;                            (p.previousElementSibling || p.previousSibling).style.display = &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;;                            document.getElementById(&quot; , &quot;'&quot; , &quot;sfMiniToolbar-&quot; , &quot;'&quot; , &quot; + newToken).style.display = &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot;;                            setPreference(&quot; , &quot;'&quot; , &quot;toolbar/displayState&quot; , &quot;'&quot; , &quot;, &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;);                        });                        addEventListener(document.getElementById(&quot; , &quot;'&quot; , &quot;sfToolbarMiniToggler-&quot; , &quot;'&quot; , &quot; + newToken), &quot; , &quot;'&quot; , &quot;click&quot; , &quot;'&quot; , &quot;, function (event) {                            event.preventDefault();                            var elem = this.parentNode;                            if (elem.style.display == &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;) {                                document.getElementById(&quot; , &quot;'&quot; , &quot;sfToolbarMainContent-&quot; , &quot;'&quot; , &quot; + newToken).style.display = &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;;                                document.getElementById(&quot; , &quot;'&quot; , &quot;sfToolbarClearer-&quot; , &quot;'&quot; , &quot; + newToken).style.display = &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;;                                elem.style.display = &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot;;                            } else {                                document.getElementById(&quot; , &quot;'&quot; , &quot;sfToolbarMainContent-&quot; , &quot;'&quot; , &quot; + newToken).style.display = &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot;;                                document.getElementById(&quot; , &quot;'&quot; , &quot;sfToolbarClearer-&quot; , &quot;'&quot; , &quot; + newToken).style.display = &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot;;                                elem.style.display = &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot;                            }                            setPreference(&quot; , &quot;'&quot; , &quot;toolbar/displayState&quot; , &quot;'&quot; , &quot;, &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot;);                        });                        renderAjaxRequests();                        addEventListener(document.querySelector(&quot; , &quot;'&quot; , &quot;.sf-toolbar-block-ajax&quot; , &quot;'&quot; , &quot;), &quot; , &quot;'&quot; , &quot;mouseenter&quot; , &quot;'&quot; , &quot;, function (event) {                            var elem = document.querySelector(&quot; , &quot;'&quot; , &quot;.sf-toolbar-block-ajax .sf-toolbar-info&quot; , &quot;'&quot; , &quot;);                            elem.scrollTop = elem.scrollHeight;                        });                        addEventListener(document.querySelector(&quot; , &quot;'&quot; , &quot;.sf-toolbar-block-ajax > .sf-toolbar-icon&quot; , &quot;'&quot; , &quot;), &quot; , &quot;'&quot; , &quot;click&quot; , &quot;'&quot; , &quot;, function (event) {                            event.preventDefault();                            toggleClass(this.parentNode, &quot; , &quot;'&quot; , &quot;hover&quot; , &quot;'&quot; , &quot;);                        });                        var dumpInfo = document.querySelector(&quot; , &quot;'&quot; , &quot;.sf-toolbar-block-dump .sf-toolbar-info&quot; , &quot;'&quot; , &quot;);                        if (null !== dumpInfo) {                            addEventListener(dumpInfo, &quot; , &quot;'&quot; , &quot;sfbeforedumpcollapse&quot; , &quot;'&quot; , &quot;, function () {                                dumpInfo.style.minHeight = dumpInfo.getBoundingClientRect().height+&quot; , &quot;'&quot; , &quot;px&quot; , &quot;'&quot; , &quot;;                            });                            addEventListener(dumpInfo, &quot; , &quot;'&quot; , &quot;mouseleave&quot; , &quot;'&quot; , &quot;, function () {                                dumpInfo.style.minHeight = &quot; , &quot;'&quot; , &quot;&quot; , &quot;'&quot; , &quot;;                            });                        }                    },                    function(xhr) {                        if (xhr.status !== 0) {                            var sfwdt = document.getElementById(&quot; , &quot;'&quot; , &quot;sfwdt&quot; , &quot;'&quot; , &quot; + token);                            sfwdt.innerHTML = &quot; , &quot;'&quot; , &quot;\                                &lt;div class=&quot;sf-toolbarreset&quot;>\                                    &lt;div class=&quot;sf-toolbar-icon&quot;>&lt;svg width=&quot;26&quot; height=&quot;28&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; x=&quot;0px&quot; y=&quot;0px&quot; viewBox=&quot;0 0 26 28&quot; enable-background=&quot;new 0 0 26 28&quot; xml:space=&quot;preserve&quot;>&lt;path fill=&quot;#FFFFFF&quot; d=&quot;M13 0C5.8 0 0 5.8 0 13c0 7.2 5.8 13 13 13c7.2 0 13-5.8 13-13C26 5.8 20.2 0 13 0z M20 7.5 c-0.6 0-1-0.3-1-0.9c0-0.2 0-0.4 0.2-0.6c0.1-0.3 0.2-0.3 0.2-0.4c0-0.3-0.5-0.4-0.7-0.4c-2 0.1-2.5 2.7-2.9 4.8l-0.2 1.1 c1.1 0.2 1.9 0 2.4-0.3c0.6-0.4-0.2-0.8-0.1-1.3C18 9.2 18.4 9 18.7 8.9c0.5 0 0.8 0.5 0.8 1c0 0.8-1.1 2-3.3 1.9 c-0.3 0-0.5 0-0.7-0.1L15 14.1c-0.4 1.7-0.9 4.1-2.6 6.2c-1.5 1.8-3.1 2.1-3.8 2.1c-1.3 0-2.1-0.6-2.2-1.6c0-0.9 0.8-1.4 1.3-1.4 c0.7 0 1.2 0.5 1.2 1.1c0 0.5-0.2 0.6-0.4 0.7c-0.1 0.1-0.3 0.2-0.3 0.4c0 0.1 0.1 0.3 0.4 0.3c0.5 0 0.9-0.3 1.2-0.5 c1.3-1 1.7-2.9 2.4-6.2l0.1-0.8c0.2-1.1 0.5-2.3 0.8-3.5c-0.9-0.7-1.4-1.5-2.6-1.8c-0.8-0.2-1.3 0-1.7 0.4C8.4 10 8.6 10.7 9 11.1 l0.7 0.7c0.8 0.9 1.3 1.7 1.1 2.7c-0.3 1.6-2.1 2.8-4.3 2.1c-1.9-0.6-2.2-1.9-2-2.7c0.2-0.6 0.7-0.8 1.2-0.6 c0.5 0.2 0.7 0.8 0.6 1.3c0 0.1 0 0.1-0.1 0.3C6 15 5.9 15.2 5.9 15.3c-0.1 0.4 0.4 0.7 0.8 0.8c0.8 0.3 1.7-0.2 1.9-0.9 c0.2-0.6-0.2-1.1-0.4-1.2l-0.8-0.9c-0.4-0.4-1.2-1.5-0.8-2.8c0.2-0.5 0.5-1 0.9-1.4c1-0.7 2-0.8 3-0.6c1.3 0.4 1.9 1.2 2.8 1.9 c0.5-1.3 1.1-2.6 2-3.8c0.9-1 2-1.7 3.3-1.8C20 4.8 21 5.4 21 6.3C21 6.7 20.8 7.5 20 7.5z&quot;/>&lt;/svg>&lt;/div>\                                    An error occurred while loading the web debug toolbar. &lt;a href=&quot;\/_profiler\/&quot; , &quot;'&quot; , &quot; + newToken + &quot; , &quot;'&quot; , &quot;>Open the web profiler.&lt;/a>\                                &lt;/div>\                            &quot; , &quot;'&quot; , &quot;;                            sfwdt.setAttribute(&quot; , &quot;'&quot; , &quot;class&quot; , &quot;'&quot; , &quot;, &quot; , &quot;'&quot; , &quot;sf-toolbar sf-error-toolbar&quot; , &quot;'&quot; , &quot;);                        }                    },                    { maxTries: 5 }                );                return this;            },            toggle: function(selector, elOn, elOff) {                var tmp = elOn.style.display,                    el = document.getElementById(selector);                elOn.style.display = elOff.style.display;                elOff.style.display = tmp;                if (el) {                    el.style.display = &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot; === tmp ? &quot; , &quot;'&quot; , &quot;none&quot; , &quot;'&quot; , &quot; : &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot;;                }                return this;            },            createTabs: function() {                var tabGroups = document.querySelectorAll(&quot; , &quot;'&quot; , &quot;.sf-tabs:not([data-processed=true])&quot; , &quot;'&quot; , &quot;);                /* create the tab navigation for each group of tabs */                for (var i = 0; i &lt; tabGroups.length; i++) {                    var tabs = tabGroups[i].querySelectorAll(&quot; , &quot;'&quot; , &quot;:scope > .tab&quot; , &quot;'&quot; , &quot;);                    var tabNavigation = document.createElement(&quot; , &quot;'&quot; , &quot;ul&quot; , &quot;'&quot; , &quot;);                    tabNavigation.className = &quot; , &quot;'&quot; , &quot;tab-navigation&quot; , &quot;'&quot; , &quot;;                    var selectedTabId = &quot; , &quot;'&quot; , &quot;tab-&quot; , &quot;'&quot; , &quot; + i + &quot; , &quot;'&quot; , &quot;-0&quot; , &quot;'&quot; , &quot;; /* select the first tab by default */                    for (var j = 0; j &lt; tabs.length; j++) {                        var tabId = &quot; , &quot;'&quot; , &quot;tab-&quot; , &quot;'&quot; , &quot; + i + &quot; , &quot;'&quot; , &quot;-&quot; , &quot;'&quot; , &quot; + j;                        var tabTitle = tabs[j].querySelector(&quot; , &quot;'&quot; , &quot;.tab-title&quot; , &quot;'&quot; , &quot;).innerHTML;                        var tabNavigationItem = document.createElement(&quot; , &quot;'&quot; , &quot;li&quot; , &quot;'&quot; , &quot;);                        tabNavigationItem.setAttribute(&quot; , &quot;'&quot; , &quot;data-tab-id&quot; , &quot;'&quot; , &quot;, tabId);                        if (hasClass(tabs[j], &quot; , &quot;'&quot; , &quot;active&quot; , &quot;'&quot; , &quot;)) { selectedTabId = tabId; }                        if (hasClass(tabs[j], &quot; , &quot;'&quot; , &quot;disabled&quot; , &quot;'&quot; , &quot;)) { addClass(tabNavigationItem, &quot; , &quot;'&quot; , &quot;disabled&quot; , &quot;'&quot; , &quot;); }                        tabNavigationItem.innerHTML = tabTitle;                        tabNavigation.appendChild(tabNavigationItem);                        var tabContent = tabs[j].querySelector(&quot; , &quot;'&quot; , &quot;.tab-content&quot; , &quot;'&quot; , &quot;);                        tabContent.parentElement.setAttribute(&quot; , &quot;'&quot; , &quot;id&quot; , &quot;'&quot; , &quot;, tabId);                    }                    tabGroups[i].insertBefore(tabNavigation, tabGroups[i].firstChild);                    addClass(document.querySelector(&quot; , &quot;'&quot; , &quot;[data-tab-id=&quot;&quot; , &quot;'&quot; , &quot; + selectedTabId + &quot; , &quot;'&quot; , &quot;&quot;]&quot; , &quot;'&quot; , &quot;), &quot; , &quot;'&quot; , &quot;active&quot; , &quot;'&quot; , &quot;);                }                /* display the active tab and add the &quot; , &quot;'&quot; , &quot;click&quot; , &quot;'&quot; , &quot; event listeners */                for (i = 0; i &lt; tabGroups.length; i++) {                    tabNavigation = tabGroups[i].querySelectorAll(&quot; , &quot;'&quot; , &quot;:scope > .tab-navigation li&quot; , &quot;'&quot; , &quot;);                    for (j = 0; j &lt; tabNavigation.length; j++) {                        tabId = tabNavigation[j].getAttribute(&quot; , &quot;'&quot; , &quot;data-tab-id&quot; , &quot;'&quot; , &quot;);                        document.getElementById(tabId).querySelector(&quot; , &quot;'&quot; , &quot;.tab-title&quot; , &quot;'&quot; , &quot;).className = &quot; , &quot;'&quot; , &quot;hidden&quot; , &quot;'&quot; , &quot;;                        if (hasClass(tabNavigation[j], &quot; , &quot;'&quot; , &quot;active&quot; , &quot;'&quot; , &quot;)) {                            document.getElementById(tabId).className = &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot;;                        } else {                            document.getElementById(tabId).className = &quot; , &quot;'&quot; , &quot;hidden&quot; , &quot;'&quot; , &quot;;                        }                        tabNavigation[j].addEventListener(&quot; , &quot;'&quot; , &quot;click&quot; , &quot;'&quot; , &quot;, function(e) {                            var activeTab = e.target || e.srcElement;                            /* needed because when the tab contains HTML contents, user can click */                            /* on any of those elements instead of their parent &quot; , &quot;'&quot; , &quot;&lt;li>&quot; , &quot;'&quot; , &quot; element */                            while (activeTab.tagName.toLowerCase() !== &quot; , &quot;'&quot; , &quot;li&quot; , &quot;'&quot; , &quot;) {                                activeTab = activeTab.parentNode;                            }                            /* get the full list of tabs through the parent of the active tab element */                            var tabNavigation = activeTab.parentNode.children;                            for (var k = 0; k &lt; tabNavigation.length; k++) {                                var tabId = tabNavigation[k].getAttribute(&quot; , &quot;'&quot; , &quot;data-tab-id&quot; , &quot;'&quot; , &quot;);                                document.getElementById(tabId).className = &quot; , &quot;'&quot; , &quot;hidden&quot; , &quot;'&quot; , &quot;;                                removeClass(tabNavigation[k], &quot; , &quot;'&quot; , &quot;active&quot; , &quot;'&quot; , &quot;);                            }                            addClass(activeTab, &quot; , &quot;'&quot; , &quot;active&quot; , &quot;'&quot; , &quot;);                            var activeTabId = activeTab.getAttribute(&quot; , &quot;'&quot; , &quot;data-tab-id&quot; , &quot;'&quot; , &quot;);                            document.getElementById(activeTabId).className = &quot; , &quot;'&quot; , &quot;block&quot; , &quot;'&quot; , &quot;;                        });                    }                    tabGroups[i].setAttribute(&quot; , &quot;'&quot; , &quot;data-processed&quot; , &quot;'&quot; , &quot;, &quot; , &quot;'&quot; , &quot;true&quot; , &quot;'&quot; , &quot;);                }            },            createToggles: function() {                var toggles = document.querySelectorAll(&quot; , &quot;'&quot; , &quot;.sf-toggle:not([data-processed=true])&quot; , &quot;'&quot; , &quot;);                for (var i = 0; i &lt; toggles.length; i++) {                    var elementSelector = toggles[i].getAttribute(&quot; , &quot;'&quot; , &quot;data-toggle-selector&quot; , &quot;'&quot; , &quot;);                    var element = document.querySelector(elementSelector);                    addClass(element, &quot; , &quot;'&quot; , &quot;sf-toggle-content&quot; , &quot;'&quot; , &quot;);                    if (toggles[i].hasAttribute(&quot; , &quot;'&quot; , &quot;data-toggle-initial&quot; , &quot;'&quot; , &quot;) &amp;&amp; toggles[i].getAttribute(&quot; , &quot;'&quot; , &quot;data-toggle-initial&quot; , &quot;'&quot; , &quot;) == &quot; , &quot;'&quot; , &quot;display&quot; , &quot;'&quot; , &quot;) {                        addClass(toggles[i], &quot; , &quot;'&quot; , &quot;sf-toggle-on&quot; , &quot;'&quot; , &quot;);                        addClass(element, &quot; , &quot;'&quot; , &quot;sf-toggle-visible&quot; , &quot;'&quot; , &quot;);                    } else {                        addClass(toggles[i], &quot; , &quot;'&quot; , &quot;sf-toggle-off&quot; , &quot;'&quot; , &quot;);                        addClass(element, &quot; , &quot;'&quot; , &quot;sf-toggle-hidden&quot; , &quot;'&quot; , &quot;);                    }                    addEventListener(toggles[i], &quot; , &quot;'&quot; , &quot;click&quot; , &quot;'&quot; , &quot;, function(e) {                        e.preventDefault();                        if (&quot; , &quot;'&quot; , &quot;&quot; , &quot;'&quot; , &quot; !== window.getSelection().toString()) {                            /* Don&quot; , &quot;'&quot; , &quot;t do anything on text selection */                            return;                        }                        var toggle = e.target || e.srcElement;                        /* needed because when the toggle contains HTML contents, user can click */                        /* on any of those elements instead of their parent &quot; , &quot;'&quot; , &quot;.sf-toggle&quot; , &quot;'&quot; , &quot; element */                        while (!hasClass(toggle, &quot; , &quot;'&quot; , &quot;sf-toggle&quot; , &quot;'&quot; , &quot;)) {                            toggle = toggle.parentNode;                        }                        var element = document.querySelector(toggle.getAttribute(&quot; , &quot;'&quot; , &quot;data-toggle-selector&quot; , &quot;'&quot; , &quot;));                        toggleClass(toggle, &quot; , &quot;'&quot; , &quot;sf-toggle-on&quot; , &quot;'&quot; , &quot;);                        toggleClass(toggle, &quot; , &quot;'&quot; , &quot;sf-toggle-off&quot; , &quot;'&quot; , &quot;);                        toggleClass(element, &quot; , &quot;'&quot; , &quot;sf-toggle-hidden&quot; , &quot;'&quot; , &quot;);                        toggleClass(element, &quot; , &quot;'&quot; , &quot;sf-toggle-visible&quot; , &quot;'&quot; , &quot;);                        /* the toggle doesn&quot; , &quot;'&quot; , &quot;t change its contents when clicking on it */                        if (!toggle.hasAttribute(&quot; , &quot;'&quot; , &quot;data-toggle-alt-content&quot; , &quot;'&quot; , &quot;)) {                            return;                        }                        if (!toggle.hasAttribute(&quot; , &quot;'&quot; , &quot;data-toggle-original-content&quot; , &quot;'&quot; , &quot;)) {                            toggle.setAttribute(&quot; , &quot;'&quot; , &quot;data-toggle-original-content&quot; , &quot;'&quot; , &quot;, toggle.innerHTML);                        }                        var currentContent = toggle.innerHTML;                        var originalContent = toggle.getAttribute(&quot; , &quot;'&quot; , &quot;data-toggle-original-content&quot; , &quot;'&quot; , &quot;);                        var altContent = toggle.getAttribute(&quot; , &quot;'&quot; , &quot;data-toggle-alt-content&quot; , &quot;'&quot; , &quot;);                        toggle.innerHTML = currentContent !== altContent ? altContent : originalContent;                    });                    /* Prevents from disallowing clicks on links inside toggles */                    var toggleLinks = toggles[i].querySelectorAll(&quot; , &quot;'&quot; , &quot;a&quot; , &quot;'&quot; , &quot;);                    for (var j = 0; j &lt; toggleLinks.length; j++) {                        addEventListener(toggleLinks[j], &quot; , &quot;'&quot; , &quot;click&quot; , &quot;'&quot; , &quot;, function(e) {                            e.stopPropagation();                        });                    }                    toggles[i].setAttribute(&quot; , &quot;'&quot; , &quot;data-processed&quot; , &quot;'&quot; , &quot;, &quot; , &quot;'&quot; , &quot;true&quot; , &quot;'&quot; , &quot;);                }            },            createFilters: function() {                document.querySelectorAll(&quot; , &quot;'&quot; , &quot;[data-filters] [data-filter]&quot; , &quot;'&quot; , &quot;).forEach(function (filter) {                    var filters = filter.closest(&quot; , &quot;'&quot; , &quot;[data-filters]&quot; , &quot;'&quot; , &quot;),                        type = &quot; , &quot;'&quot; , &quot;choice&quot; , &quot;'&quot; , &quot;,                        name = filter.dataset.filter,                        ucName = name.charAt(0).toUpperCase()+name.slice(1),                        list = document.createElement(&quot; , &quot;'&quot; , &quot;ul&quot; , &quot;'&quot; , &quot;),                        values = filters.dataset[&quot; , &quot;'&quot; , &quot;filter&quot; , &quot;'&quot; , &quot;+ucName] || filters.querySelectorAll(&quot; , &quot;'&quot; , &quot;[data-filter-&quot; , &quot;'&quot; , &quot;+name+&quot; , &quot;'&quot; , &quot;]&quot; , &quot;'&quot; , &quot;),                        labels = {},                        defaults = null,                        indexed = {},                        processed = {};                    if (typeof values === &quot; , &quot;'&quot; , &quot;string&quot; , &quot;'&quot; , &quot;) {                        type = &quot; , &quot;'&quot; , &quot;level&quot; , &quot;'&quot; , &quot;;                        labels = values.split(&quot; , &quot;'&quot; , &quot;,&quot; , &quot;'&quot; , &quot;);                        values = values.toLowerCase().split(&quot; , &quot;'&quot; , &quot;,&quot; , &quot;'&quot; , &quot;);                        defaults = values.length - 1;                    }                    addClass(list, &quot; , &quot;'&quot; , &quot;filter-list&quot; , &quot;'&quot; , &quot;);                    addClass(list, &quot; , &quot;'&quot; , &quot;filter-list-&quot; , &quot;'&quot; , &quot;+type);                    values.forEach(function (value, i) {                        if (value instanceof HTMLElement) {                            value = value.dataset[&quot; , &quot;'&quot; , &quot;filter&quot; , &quot;'&quot; , &quot;+ucName];                        }                        if (value in processed) {                            return;                        }                        var option = document.createElement(&quot; , &quot;'&quot; , &quot;li&quot; , &quot;'&quot; , &quot;),                            label = i in labels ? labels[i] : value,                            active = false,                            matches;                        if (&quot; , &quot;'&quot; , &quot;&quot; , &quot;'&quot; , &quot; === label) {                            option.innerHTML = &quot; , &quot;'&quot; , &quot;&lt;em>(none)&lt;/em>&quot; , &quot;'&quot; , &quot;;                        } else {                            option.innerText = label;                        }                        option.dataset.filter = value;                        option.setAttribute(&quot; , &quot;'&quot; , &quot;title&quot; , &quot;'&quot; , &quot;, 1 === (matches = filters.querySelectorAll(&quot; , &quot;'&quot; , &quot;[data-filter-&quot; , &quot;'&quot; , &quot;+name+&quot; , &quot;'&quot; , &quot;=&quot;&quot; , &quot;'&quot; , &quot;+value+&quot; , &quot;'&quot; , &quot;&quot;]&quot; , &quot;'&quot; , &quot;).length) ? &quot; , &quot;'&quot; , &quot;Matches 1 row&quot; , &quot;'&quot; , &quot; : &quot; , &quot;'&quot; , &quot;Matches &quot; , &quot;'&quot; , &quot;+matches+&quot; , &quot;'&quot; , &quot; rows&quot; , &quot;'&quot; , &quot;);                        indexed[value] = i;                        list.appendChild(option);                        addEventListener(option, &quot; , &quot;'&quot; , &quot;click&quot; , &quot;'&quot; , &quot;, function () {                            if (&quot; , &quot;'&quot; , &quot;choice&quot; , &quot;'&quot; , &quot; === type) {                                filters.querySelectorAll(&quot; , &quot;'&quot; , &quot;[data-filter-&quot; , &quot;'&quot; , &quot;+name+&quot; , &quot;'&quot; , &quot;]&quot; , &quot;'&quot; , &quot;).forEach(function (row) {                                    if (option.dataset.filter === row.dataset[&quot; , &quot;'&quot; , &quot;filter&quot; , &quot;'&quot; , &quot;+ucName]) {                                        toggleClass(row, &quot; , &quot;'&quot; , &quot;filter-hidden-&quot; , &quot;'&quot; , &quot;+name);                                    }                                });                                toggleClass(option, &quot; , &quot;'&quot; , &quot;active&quot; , &quot;'&quot; , &quot;);                            } else if (&quot; , &quot;'&quot; , &quot;level&quot; , &quot;'&quot; , &quot; === type) {                                if (i === this.parentNode.querySelectorAll(&quot; , &quot;'&quot; , &quot;.active&quot; , &quot;'&quot; , &quot;).length - 1) {                                    return;                                }                                this.parentNode.querySelectorAll(&quot; , &quot;'&quot; , &quot;li&quot; , &quot;'&quot; , &quot;).forEach(function (currentOption, j) {                                    if (j &lt;= i) {                                        addClass(currentOption, &quot; , &quot;'&quot; , &quot;active&quot; , &quot;'&quot; , &quot;);                                        if (i === j) {                                            addClass(currentOption, &quot; , &quot;'&quot; , &quot;last-active&quot; , &quot;'&quot; , &quot;);                                        } else {                                            removeClass(currentOption, &quot; , &quot;'&quot; , &quot;last-active&quot; , &quot;'&quot; , &quot;);                                        }                                    } else {                                        removeClass(currentOption, &quot; , &quot;'&quot; , &quot;active&quot; , &quot;'&quot; , &quot;);                                        removeClass(currentOption, &quot; , &quot;'&quot; , &quot;last-active&quot; , &quot;'&quot; , &quot;);                                    }                                });                                filters.querySelectorAll(&quot; , &quot;'&quot; , &quot;[data-filter-&quot; , &quot;'&quot; , &quot;+name+&quot; , &quot;'&quot; , &quot;]&quot; , &quot;'&quot; , &quot;).forEach(function (row) {                                    if (i &lt; indexed[row.dataset[&quot; , &quot;'&quot; , &quot;filter&quot; , &quot;'&quot; , &quot;+ucName]]) {                                        addClass(row, &quot; , &quot;'&quot; , &quot;filter-hidden-&quot; , &quot;'&quot; , &quot;+name);                                    } else {                                        removeClass(row, &quot; , &quot;'&quot; , &quot;filter-hidden-&quot; , &quot;'&quot; , &quot;+name);                                    }                                });                            }                        });                        if (&quot; , &quot;'&quot; , &quot;choice&quot; , &quot;'&quot; , &quot; === type) {                            active = null === defaults || 0 &lt;= defaults.indexOf(value);                        } else if (&quot; , &quot;'&quot; , &quot;level&quot; , &quot;'&quot; , &quot; === type) {                            active = i &lt;= defaults;                            if (active &amp;&amp; i === defaults) {                                addClass(option, &quot; , &quot;'&quot; , &quot;last-active&quot; , &quot;'&quot; , &quot;);                            }                        }                        if (active) {                            addClass(option, &quot; , &quot;'&quot; , &quot;active&quot; , &quot;'&quot; , &quot;);                        } else {                            filters.querySelectorAll(&quot; , &quot;'&quot; , &quot;[data-filter-&quot; , &quot;'&quot; , &quot;+name+&quot; , &quot;'&quot; , &quot;=&quot;&quot; , &quot;'&quot; , &quot;+value+&quot; , &quot;'&quot; , &quot;&quot;]&quot; , &quot;'&quot; , &quot;).forEach(function (row) {                                toggleClass(row, &quot; , &quot;'&quot; , &quot;filter-hidden-&quot; , &quot;'&quot; , &quot;+name);                            });                        }                        processed[value] = true;                    });                    if (1 &lt; list.childNodes.length) {                        filter.appendChild(list);                        filter.dataset.filtered = &quot; , &quot;'&quot; , &quot;&quot; , &quot;'&quot; , &quot;;                    }                });            }        };    })();    Sfjs.addEventListener(document, &quot; , &quot;'&quot; , &quot;DOMContentLoaded&quot; , &quot;'&quot; , &quot;, function() {        Sfjs.createTabs();        Sfjs.createToggles();    });/*]]&gt;*/    .sf-minitoolbar {    background-color: #222;    border-top-left-radius: 4px;    bottom: 0;    box-sizing: border-box;    display: none;    height: 36px;    padding: 6px;    position: fixed;    right: 0;    z-index: 99999;}.sf-minitoolbar a {    display: block;}.sf-minitoolbar svg,.sf-minitoolbar img {    max-height: 24px;    max-width: 24px;    display: inline;}.sf-toolbar-clearer {    clear: both;    height: 36px;}.sf-display-none {    display: none;}.sf-toolbarreset * {    box-sizing: content-box;    vertical-align: baseline;    letter-spacing: normal;    width: auto;}.sf-toolbarreset {    background-color: #222;    bottom: 0;    box-shadow: 0 -1px 0 rgba(0, 0, 0, 0.2);    color: #EEE;    font: 11px Arial, sans-serif;    left: 0;    margin: 0;    padding: 0 36px 0 0;    position: fixed;    right: 0;    text-align: left;    text-transform: none;    z-index: 99999;    direction: ltr;    /* neutralize the aliasing defined by external CSS styles */    -webkit-font-smoothing: subpixel-antialiased;    -moz-osx-font-smoothing: auto;}.sf-toolbarreset abbr {    border: dashed #777;    border-width: 0 0 1px;}.sf-toolbarreset svg,.sf-toolbarreset img {    height: 20px;    width: 20px;    display: inline-block;}.sf-toolbarreset .hide-button {    background: #444;    display: block;    position: absolute;    top: 0;    right: 0;    width: 36px;    height: 36px;    cursor: pointer;    text-align: center;}.sf-toolbarreset .hide-button svg {    max-height: 18px;    margin-top: 10px;}.sf-toolbar-block {    cursor: default;    display: block;    float: left;    height: 36px;    margin-right: 0;    white-space: nowrap;    max-width: 15%;}.sf-toolbar-block > a,.sf-toolbar-block > a:hover {    display: block;    text-decoration: none;    color: inherit;}.sf-toolbar-block span {    display: inline-block;}.sf-toolbar-block .sf-toolbar-value {    color: #F5F5F5;    font-size: 13px;    line-height: 36px;    padding: 0;}.sf-toolbar-block .sf-toolbar-label,.sf-toolbar-block .sf-toolbar-class-separator {    color: #AAA;    font-size: 12px;}.sf-toolbar-block .sf-toolbar-info {    border-collapse: collapse;    display: table;    z-index: 100000;}.sf-toolbar-block hr {    border-top: 1px solid #777;    margin: 4px 0;    padding-top: 4px;}.sf-toolbar-block .sf-toolbar-info-piece {    /* this &quot; , &quot;'&quot; , &quot;border-bottom&quot; , &quot;'&quot; , &quot; trick is needed because &quot; , &quot;'&quot; , &quot;margin-bottom&quot; , &quot;'&quot; , &quot; doesn&quot; , &quot;'&quot; , &quot;t work for table rows */    border-bottom: solid transparent 3px;    display: table-row;}.sf-toolbar-block .sf-toolbar-info-piece-additional,.sf-toolbar-block .sf-toolbar-info-piece-additional-detail {    display: none;}.sf-toolbar-block .sf-toolbar-info-group {    margin-bottom: 4px;    padding-bottom: 2px;    border-bottom: 1px solid #333333;}.sf-toolbar-block .sf-toolbar-info-group:last-child {    margin-bottom: 0;    padding-bottom: 0;    border-bottom: none;}.sf-toolbar-block .sf-toolbar-info-piece .sf-toolbar-status {    padding: 2px 5px;    margin-bottom: 0;}.sf-toolbar-block .sf-toolbar-info-piece .sf-toolbar-status + .sf-toolbar-status {    margin-left: 4px;}.sf-toolbar-block .sf-toolbar-info-piece:last-child {    margin-bottom: 0;}div.sf-toolbar .sf-toolbar-block .sf-toolbar-info-piece a {    color: #99CDD8;    text-decoration: underline;}div.sf-toolbar .sf-toolbar-block a:hover {    text-decoration: none;}.sf-toolbar-block .sf-toolbar-info-piece b {    color: #AAA;    display: table-cell;    font-size: 11px;    padding: 4px 8px 4px 0;}.sf-toolbar-block:not(.sf-toolbar-block-dump) .sf-toolbar-info-piece span {    color: #F5F5F5;}.sf-toolbar-block .sf-toolbar-info-piece span {    font-size: 12px;}.sf-toolbar-block .sf-toolbar-info {    background-color: #444;    bottom: 36px;    color: #F5F5F5;    display: none;    padding: 9px 0;    position: absolute;}.sf-toolbar-block .sf-toolbar-info:empty {    visibility: hidden;}.sf-toolbar-block .sf-toolbar-status {    display: inline-block;    color: #FFF;    background-color: #666;    padding: 3px 6px;    margin-bottom: 2px;    vertical-align: middle;    min-width: 15px;    min-height: 13px;    text-align: center;}.sf-toolbar-block .sf-toolbar-status-green {    background-color: #4F805D;}.sf-toolbar-block .sf-toolbar-status-red {    background-color: #B0413E;}.sf-toolbar-block .sf-toolbar-status-yellow {    background-color: #A46A1F;}.sf-toolbar-block.sf-toolbar-status-green {    background-color: #4F805D;    color: #FFF;}.sf-toolbar-block.sf-toolbar-status-red {    background-color: #B0413E;    color: #FFF;}.sf-toolbar-block.sf-toolbar-status-yellow {    background-color: #A46A1F;    color: #FFF;}.sf-toolbar-block-request .sf-toolbar-status {    color: #FFF;    display: inline-block;    font-size: 14px;    height: 36px;    line-height: 36px;    padding: 0 10px;}.sf-toolbar-block-request .sf-toolbar-info-piece a {    text-decoration: none;}.sf-toolbar-block-request .sf-toolbar-info-piece a:hover {    text-decoration: underline;}.sf-toolbar-block-request .sf-toolbar-redirection-status {    font-weight: normal;    padding: 2px 4px;    line-height: 18px;}.sf-toolbar-block-request .sf-toolbar-info-piece span.sf-toolbar-redirection-method {    font-size: 12px;    height: 17px;    line-height: 17px;    margin-right: 5px;}.sf-toolbar-block-ajax .sf-toolbar-icon {    cursor: pointer;}.sf-toolbar-status-green .sf-toolbar-label,.sf-toolbar-status-yellow .sf-toolbar-label,.sf-toolbar-status-red .sf-toolbar-label {    color: #FFF;}.sf-toolbar-status-green svg path,.sf-toolbar-status-green svg .sf-svg-path,.sf-toolbar-status-red svg path,.sf-toolbar-status-red svg .sf-svg-path,.sf-toolbar-status-yellow svg path,.sf-toolbar-status-yellow svg .sf-svg-path {    fill: #FFF;}.sf-toolbar-block-config svg path,.sf-toolbar-block-config svg .sf-svg-path {    fill: #FFF;}.sf-toolbar-block .sf-toolbar-icon {    display: block;    height: 36px;    padding: 0 7px;    overflow: hidden;    text-overflow: ellipsis;}.sf-toolbar-block-request .sf-toolbar-icon {    padding-left: 0;    padding-right: 0;}.sf-toolbar-block .sf-toolbar-icon img,.sf-toolbar-block .sf-toolbar-icon svg {    border-width: 0;    position: relative;    top: 8px;    vertical-align: baseline;}.sf-toolbar-block .sf-toolbar-icon img + span,.sf-toolbar-block .sf-toolbar-icon svg + span {    margin-left: 4px;}.sf-toolbar-block-config .sf-toolbar-icon .sf-toolbar-value {    margin-left: 4px;}.sf-toolbar-block:hover,.sf-toolbar-block.hover {    position: relative;}.sf-toolbar-block:hover .sf-toolbar-icon,.sf-toolbar-block.hover .sf-toolbar-icon {    background-color: #444;    position: relative;    z-index: 10002;}.sf-toolbar-block-ajax.hover .sf-toolbar-info {    z-index: 10001;}.sf-toolbar-block:hover .sf-toolbar-info,.sf-toolbar-block.hover .sf-toolbar-info {    display: block;    padding: 10px;    max-width: 480px;    max-height: 480px;    word-wrap: break-word;    overflow: hidden;    overflow-y: auto;}.sf-toolbar-info-piece b.sf-toolbar-ajax-info {    color: #F5F5F5;}.sf-toolbar-ajax-requests {    table-layout: auto;    width: 100%;}.sf-toolbar-ajax-requests td {    background-color: #444;    border-bottom: 1px solid #777;    color: #F5F5F5;    font-size: 12px;    padding: 4px;}.sf-toolbar-ajax-requests tr:last-child td {    border-bottom: 0;}.sf-toolbar-ajax-requests th {    background-color: #222;    border-bottom: 0;    color: #AAA;    font-size: 11px;    padding: 4px;}.sf-ajax-request-url {    max-width: 250px;    line-height: 9px;    overflow: hidden;    text-overflow: ellipsis;}.sf-toolbar-ajax-requests .sf-ajax-request-url a {    text-decoration: none;}.sf-toolbar-ajax-requests .sf-ajax-request-url a:hover {    text-decoration: underline;}.sf-ajax-request-duration {    text-align: right;}.sf-ajax-request-loading {    animation: sf-blink .5s ease-in-out infinite;}@keyframes sf-blink {    0% { background: #222; }    50% { background: #444; }    100% { background: #222; }}.sf-toolbar-block.sf-toolbar-block-dump .sf-toolbar-info {    max-width: none;    width: 100%;    position: fixed;    box-sizing: border-box;    left: 0;}.sf-toolbar-block-dump pre.sf-dump {    background-color: #222;    border-color: #777;    border-radius: 0;    margin: 6px 0 12px 0;}.sf-toolbar-block-dump pre.sf-dump:last-child {    margin-bottom: 0;}.sf-toolbar-block-dump pre.sf-dump .sf-dump-search-wrapper {    margin-bottom: 5px;}.sf-toolbar-block-dump pre.sf-dump span.sf-dump-search-count {    color: #333;    font-size: 12px;}.sf-toolbar-block-dump .sf-toolbar-info-piece {    display: block;}.sf-toolbar-block-dump .sf-toolbar-info-piece .sf-toolbar-file-line {    color: #AAA;    margin-left: 4px;}.sf-toolbar-block-dump .sf-toolbar-info img {    display: none;}/* Responsive Design */.sf-toolbar-icon .sf-toolbar-label,.sf-toolbar-icon .sf-toolbar-value {    display: none;}.sf-toolbar-block-config .sf-toolbar-icon .sf-toolbar-label {    display: inline-block;}/* Legacy Design - these styles are maintained to make old panels look   a bit better on the new toolbar */.sf-toolbar-block .sf-toolbar-info-piece-additional-detail {    color: #AAA;    font-size: 12px;}.sf-toolbar-status-green .sf-toolbar-info-piece-additional-detail,.sf-toolbar-status-yellow .sf-toolbar-info-piece-additional-detail,.sf-toolbar-status-red .sf-toolbar-info-piece-additional-detail {    color: #FFF;}@media (min-width: 768px) {    .sf-toolbar-icon .sf-toolbar-label,    .sf-toolbar-icon .sf-toolbar-value {        display: inline;    }    .sf-toolbar-block .sf-toolbar-icon img,    .sf-toolbar-block .sf-toolbar-icon svg {        top: 6px;    }    .sf-toolbar-block-time .sf-toolbar-icon svg,    .sf-toolbar-block-memory .sf-toolbar-icon svg {        display: none;    }    .sf-toolbar-block-time .sf-toolbar-icon svg + span,    .sf-toolbar-block-memory .sf-toolbar-icon svg + span {        margin-left: 0;    }    .sf-toolbar-block .sf-toolbar-icon {        padding: 0 10px;    }    .sf-toolbar-block-time .sf-toolbar-icon {        padding-right: 5px;    }    .sf-toolbar-block-memory .sf-toolbar-icon {        padding-left: 5px;    }    .sf-toolbar-block-request .sf-toolbar-icon {        padding-left: 0;        padding-right: 0;    }    .sf-toolbar-block-request .sf-toolbar-label {        margin-left: 5px;    }    .sf-toolbar-block-request .sf-toolbar-status + svg {        margin-left: 5px;    }    .sf-toolbar-block-request .sf-toolbar-icon svg + .sf-toolbar-label {        margin-left: 0;     }    .sf-toolbar-block-request .sf-toolbar-label + .sf-toolbar-value {        margin-right: 10px;    }    .sf-toolbar-block-request:hover .sf-toolbar-info {        max-width: none;    }    .sf-toolbar-block .sf-toolbar-info-piece b {        font-size: 12px;    }    .sf-toolbar-block .sf-toolbar-info-piece span {        font-size: 13px;    }    .sf-toolbar-block-right {        float: right;        margin-left: 0;        margin-right: 0;    }}@media (min-width: 1024px) {    .sf-toolbar-block .sf-toolbar-info-piece-additional,    .sf-toolbar-block .sf-toolbar-info-piece-additional-detail {        display: inline;    }    .sf-toolbar-block .sf-toolbar-info-piece-additional:empty,    .sf-toolbar-block .sf-toolbar-info-piece-additional-detail:empty {        display: none;    }}/***** Error Toolbar *****/.sf-error-toolbar .sf-toolbarreset {    background: #222;    color: #f5f5f5;    font: 13px/36px Arial, sans-serif;    height: 36px;    padding: 0 15px;    text-align: left;}.sf-error-toolbar .sf-toolbarreset svg {    height: auto;}.sf-error-toolbar .sf-toolbarreset a {    color: #99cdd8;    margin-left: 5px;    text-decoration: underline;}.sf-error-toolbar .sf-toolbarreset a:hover {    text-decoration: none;}.sf-error-toolbar .sf-toolbarreset .sf-toolbar-icon {    float: left;    padding: 5px 0;    margin-right: 10px;}/***** Media query print: Do not print the Toolbar. *****/@media print {    .sf-toolbar {        display: none;    }}/*&lt;![CDATA[*/    (function () {        Sfjs.loadToolbar(&quot; , &quot;'&quot; , &quot;5bf6c7&quot; , &quot;'&quot; , &quot;);    })();/*]]&gt;*/


/html[@class=&quot;wf-poppins-n3-active wf-poppins-n5-active wf-poppins-n7-active wf-poppins-n4-active wf-poppins-n6-active wf-active&quot;]/body[@class=&quot;kt-page--loading-enabled kt-quick-panel--right kt-demo-panel--right kt-offcanvas-panel--right kt-header--fixed kt-header--minimize-menu kt-header-mobile--fixed kt-subheader--enabled kt-subheader--transparent kt-aside--enabled kt-aside--left kt-aside--fixed&quot;]/div[@id=&quot;app&quot;]/div[@id=&quot;kt_login&quot;]/div[@class=&quot;kt-grid__item kt-grid__item--fluid kt-grid kt-grid--hor&quot;]/div[@class=&quot;kt-grid__item kt-grid__item--fluid kt-login__wrapper&quot;]/div[@class=&quot;kt-login__container&quot;]/div[@class=&quot;kt-login__signin&quot;]/form[@id=&quot;login-form&quot;]/div[@class=&quot;input-group&quot;]/input[@id=&quot;username&quot;]&quot;))]</value>
      <webElementGuid>f20eab08-05b8-42c2-bc7a-1ff14a7ae4f1</webElementGuid>
   </webElementXpaths>
</WebElementEntity>
